/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,16],$V2=[1,10],$V3=[1,11],$V4=[1,12],$V5=[1,13],$V6=[1,14],$V7=[1,15],$V8=[1,9],$V9=[2,5,13,20,24,27,28,29,30,43],$Va=[1,23],$Vb=[1,28],$Vc=[1,32],$Vd=[1,33],$Ve=[1,34],$Vf=[15,22,31,39],$Vg=[1,49],$Vh=[1,52],$Vi=[1,44],$Vj=[1,45],$Vk=[1,46],$Vl=[1,47],$Vm=[1,48],$Vn=[1,50],$Vo=[1,51],$Vp=[1,54],$Vq=[1,57],$Vr=[1,62],$Vs=[1,65],$Vt=[1,64],$Vu=[1,66],$Vv=[1,63],$Vw=[1,61],$Vx=[2,5,12,13,20,24,27,28,29,30,32,43],$Vy=[1,77],$Vz=[1,78],$VA=[1,90],$VB=[1,79],$VC=[1,80],$VD=[1,81],$VE=[1,82],$VF=[1,83],$VG=[1,84],$VH=[1,85],$VI=[1,86],$VJ=[1,87],$VK=[1,88],$VL=[1,89],$VM=[15,31,33,36,37,38,40,49,50,57,58,60,61,62,63,64,65,66,67,68],$VN=[15,31,33,36,40,49,50,67,68],$VO=[1,137],$VP=[31,36,40],$VQ=[1,145],$VR=[1,148],$VS=[1,147],$VT=[1,146],$VU=[31,36],$VV=[15,31,33,36,37,38,40,49,50,61,62,63,64,65,66,67,68],$VW=[15,31,33,36,40,49,50,61,62,63,64,65,66,67,68],$VX=[2,12,20,24,27,28,29,30,32];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"lista_instrucciones":4,"EOF":5,"instruccion":6,"delcarar_metodo":7,"variables":8,"casteos":9,"execute":10,"PYC":11,"LLAVE_C":12,"EXECUTE":13,"llamada_metodo":14,"PUNTOYCOMA":15,"cuerpo":16,"print":17,"incre_decre":18,"declarar_vector":19,"INT":20,"rep_iden":21,"IGUAL":22,"expresion":23,"STD":24,"DOBLEDOSPUNTOS":25,"STRING":26,"CHAR":27,"BOOL":28,"DOUBLE":29,"ID":30,"COMA":31,"COUT":32,"DOBLEMENOR":33,"ENDL":34,"PARENTESIS_A":35,"PARENTESIS_C":36,"MAS":37,"MENOS":38,"CORCHETE_A":39,"CORCHETE_C":40,"NEW":41,"lista_valores":42,"VOID":43,"LLAVE_A":44,"instrucciones_metodo":45,"parametros":46,"tipo":47,"ternario":48,"INTEROGACION":49,"DOSPUNTOS":50,"ENTERO":51,"NUMERODECIMA":52,"CARACTER":53,"TRUE":54,"FALSE":55,"TEXTO":56,"MULTI":57,"DIVICION":58,"POW":59,"MODULO":60,"DOBLEIGUAL":61,"DIFERENCIACION":62,"MENORIGUAL":63,"MENOR":64,"MAYORIGUAL":65,"MAYOR":66,"OR":67,"AND":68,"NOT":69,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"PYC",12:"LLAVE_C",13:"EXECUTE",15:"PUNTOYCOMA",20:"INT",22:"IGUAL",24:"STD",25:"DOBLEDOSPUNTOS",26:"STRING",27:"CHAR",28:"BOOL",29:"DOUBLE",30:"ID",31:"COMA",32:"COUT",33:"DOBLEMENOR",34:"ENDL",35:"PARENTESIS_A",36:"PARENTESIS_C",37:"MAS",38:"MENOS",39:"CORCHETE_A",40:"CORCHETE_C",41:"NEW",43:"VOID",44:"LLAVE_A",49:"INTEROGACION",50:"DOSPUNTOS",51:"ENTERO",52:"NUMERODECIMA",53:"CARACTER",54:"TRUE",55:"FALSE",56:"TEXTO",57:"MULTI",58:"DIVICION",59:"POW",60:"MODULO",61:"DOBLEIGUAL",62:"DIFERENCIACION",63:"MENORIGUAL",64:"MENOR",65:"MAYORIGUAL",66:"MAYOR",67:"OR",68:"AND",69:"NOT"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[10,3],[16,1],[16,1],[16,1],[16,1],[16,1],[16,2],[8,3],[8,5],[8,5],[8,7],[8,3],[8,5],[8,3],[8,5],[8,3],[8,5],[8,4],[21,3],[21,1],[17,4],[17,6],[9,8],[9,7],[9,8],[9,7],[9,12],[9,9],[9,8],[9,7],[18,4],[18,4],[19,11],[19,16],[19,20],[19,7],[42,3],[42,1],[7,7],[7,8],[46,4],[46,2],[47,1],[47,1],[47,1],[47,1],[47,3],[47,1],[45,2],[45,1],[14,3],[14,4],[48,5],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,3],[23,3],[23,3],[23,3],[23,6],[23,3],[23,2],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,1],[23,3],[23,3],[23,2],[23,4],[23,7],[23,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 var final={'errores': listaDeErrores}; this.$ = $$[$0-1], final; listaDeErrores=[] ; return this.$; 
break;
case 2:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3:
 this.$ = []; this.$.push($$[$0]); 
break;
case 4: case 5: case 6: case 11: case 12: case 13: case 14: case 15: case 89:
 this.$ = $$[$0] 
break;
case 7:
this.$ = $$[$0]
break;
case 8: case 9: case 16:
 var nuevo_error = new Error("Error Sintáctico","Recuperado con: "+yytext, this._$.first_line, this._$.first_column); listaDeErrores.push(nuevo_error);
                            console.error('Error sintáctico: ' + yytext + ',  linea: ' + this._$.first_line + ', columna: ' + this._$.first_column);
break;
case 10:
 this.$ = new Execute($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 17:
 this.$ = new Declarar($$[$0-1], TipoDato.INT, "ERROR_1", _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 18:
 this.$ = new Declarar($$[$0-3], TipoDato.INT, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 19:
 this.$ = new Declarar($$[$0-1], TipoDato.CADENA, "ERROR_2", _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 20:
 this.$ = new Declarar($$[$0-3], TipoDato.CADENA, $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 21:
 this.$ = new Declarar($$[$0-1], TipoDato.CHAR, "ERROR_3", _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 22:
 this.$ = new Declarar($$[$0-3], TipoDato.CHAR, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 23:
 this.$ = new Declarar($$[$0-1], TipoDato.BOOLEAN, "ERROR_4", _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 24:
 this.$ = new Declarar($$[$0-3], TipoDato.BOOLEAN, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 25:
 this.$ = new Declarar($$[$0-1], TipoDato.DOUBLE, "ERROR_5", _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 26:
 this.$ = new Declarar($$[$0-3], TipoDato.DOUBLE, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 27:
 this.$ = new Declarar($$[$0-3], $$[$0-1], "RENOMBRAR", _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 28:
 this.$ = $$[$0-2] ; this.$.push(new Dato($$[$0], TipoDato.ID, _$[$0-2].first_line, _$[$0-2].first_column)); 
break;
case 29:
 this.$ = [] ;  this.$.push(new Dato($$[$0], TipoDato.ID, _$[$0].first_line, _$[$0].first_column)); 
break;
case 30:
 this.$ = new Print($$[$0-1], null, _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 31:
 this.$ = new Print($$[$0-3], TipoDato.ENDL, _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 32:
 this.$ = new Casteo($$[$0-6], TipoDato.INT, $$[$0-1], "SI", _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 33:
 this.$ = new Casteo($$[$0-6], TipoDato.INT, $$[$0-1], "NO", _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 34:
 this.$ = new Casteo($$[$0-6], TipoDato.DOUBLE, $$[$0-1], "SI", _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 35:
 this.$ = new Casteo($$[$0-6], TipoDato.DOUBLE, $$[$0-1], "NO", _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 36:
 this.$ = new Casteo($$[$0-8], TipoDato.CADENA, $$[$0-1], "SI", _$[$0-11].first_line, _$[$0-11].first_column); 
break;
case 37:
 this.$ = new Casteo($$[$0-8], TipoDato.CADENA, $$[$0-1], "NO", _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 38:
 this.$ = new Casteo($$[$0-6], TipoDato.CHAR, $$[$0-1], "SI", _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 39:
 this.$ = new Casteo($$[$0-6], TipoDato.CHAR, $$[$0-1], "NO", _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 40:
 this.$ = new Incre_Decre($$[$0-3], "++", _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 41:
 this.$ = new Incre_Decre($$[$0-3], "--", _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 42:
 this.$ = new Vectores($$[$0-9], TipoDato.INT, $$[$0-2], _$[$0-10].first_line, _$[$0-10].first_column); 
break;
case 43: case 44:
  
break;
case 45:
 this.$ = new ReasignarVector($$[$0-6], $$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 46:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 47: case 59:
this.$ = [$$[$0]];
break;
case 48:
 this.$ = new DecFuncion($$[$0-5], null, null, $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 49:
 this.$ = new DecFuncion($$[$0-6], null, $$[$0-4], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 50:
 this.$ = $$[$0-3] ; this.$.push(new Dato($$[$0], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)); 
break;
case 51:
 this.$ = [] ;  this.$.push(new Dato($$[$0], $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column)); 
break;
case 52:
 this.$ = TipoDato.VOID; 
break;
case 53:
 this.$ = TipoDato.INT; 
break;
case 54:
 this.$ = TipoDato.DOUBLE; 
break;
case 55:
 this.$ = TipoDato.CHAR; 
break;
case 56:
 this.$ = TipoDato.CADENA; 
break;
case 57:
 this.$ = TipoDato.BOOLEAN; 
break;
case 58:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 60:
 this.$ = new CallFuncion($$[$0-2], null, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 61:
 this.$ = new CallFuncion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 62:
 this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 63:
 this.$ = new Dato($$[$0], TipoDato.INT, _$[$0].first_line, _$[$0].first_column); 
break;
case 64:
 this.$ = new Dato($$[$0], TipoDato.DOUBLE, _$[$0].first_line, _$[$0].first_column); 
break;
case 65:
 this.$ = new Dato($$[$0].replace(/^'|'$/g, ''), TipoDato.CHAR, _$[$0].first_line, _$[$0].first_column); 
break;
case 66: case 67:
 this.$ = new Dato($$[$0], TipoDato.BOOLEAN, _$[$0].first_line, _$[$0].first_column); 
break;
case 68:
 this.$ = new Dato($$[$0], TipoDato.ID, _$[$0].first_line, _$[$0].first_column); 
break;
case 69:
 this.$ = new Dato($$[$0], TipoDato.CADENA, _$[$0].first_line, _$[$0].first_column); 
break;
case 70: case 71: case 72: case 73: case 75: case 77: case 78: case 79: case 80: case 81: case 82: case 84: case 85:
 this.$ = new Aritmetica($$[$0-2] ,$$[$0-1] ,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 74:
 this.$ = new Aritmetica($$[$0-3] ,"pow" ,$$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 76:
 this.$ = new Negativo($$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 83:
this.$ = $$[$0];
break;
case 86:
 this.$ = new Aritmetica($$[$0] ,$$[$0-1] ,$$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 87:
 this.$ = new AccesoVector($$[$0-3], $$[$0-1], "null", _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 88:
 this.$ = new AccesoVector($$[$0-6], $$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,13:$V1,20:$V2,24:$V3,27:$V4,28:$V5,29:$V6,30:$V7,43:$V8},{1:[3]},{2:$V0,5:[1,17],6:18,7:4,8:5,9:6,10:7,13:$V1,20:$V2,24:$V3,27:$V4,28:$V5,29:$V6,30:$V7,43:$V8},o($V9,[2,3]),o($V9,[2,4]),o($V9,[2,5]),o($V9,[2,6]),o($V9,[2,7]),{11:[1,19],12:[1,20]},{30:[1,21]},{21:22,30:$Va},{25:[1,24]},{21:25,30:$Va},{21:26,30:$Va},{21:27,30:$Va},{22:$Vb},{14:29,30:[1,30]},{1:[2,1]},o($V9,[2,2]),o($V9,[2,8]),o($V9,[2,9]),{35:[1,31]},{15:$Vc,22:$Vd,31:$Ve},o($Vf,[2,29]),{26:[1,35]},{15:[1,36],22:[1,37],31:$Ve},{15:[1,38],22:[1,39],31:$Ve},{15:[1,40],22:[1,41],31:$Ve},{14:55,23:42,30:$Vg,35:[1,43],38:$Vh,48:53,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,59:$Vo,69:$Vp},{15:[1,56]},{35:$Vq},{20:$Vr,24:$Vs,27:$Vt,28:$Vu,29:$Vv,36:[1,58],43:$Vw,46:59,47:60},o($Vx,[2,17]),{14:55,23:67,30:$Vg,35:[1,68],38:$Vh,48:53,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,59:$Vo,69:$Vp},{30:[1,69]},{21:70,30:$Va},o($Vx,[2,21]),{14:55,23:71,30:$Vg,35:[1,72],38:$Vh,48:53,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,59:$Vo,69:$Vp},o($Vx,[2,23]),{14:55,23:73,30:$Vg,38:$Vh,48:53,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,59:$Vo,69:$Vp},o($Vx,[2,25]),{14:55,23:74,30:$Vg,35:[1,75],38:$Vh,48:53,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,59:$Vo,69:$Vp},{15:[1,76],37:$Vy,38:$Vz,49:$VA,57:$VB,58:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL},{20:[1,91],24:[1,93],27:[1,94],29:[1,92]},o($VM,[2,63]),o($VM,[2,64]),o($VM,[2,65]),o($VM,[2,66]),o($VM,[2,67]),o($VM,[2,68],{35:$Vq,39:[1,95]}),o($VM,[2,69]),{35:[1,96]},{14:55,23:97,30:$Vg,38:$Vh,48:53,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,59:$Vo,69:$Vp},o($VM,[2,83]),{14:55,23:98,30:$Vg,38:$Vh,48:53,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,59:$Vo,69:$Vp},o($VM,[2,89]),o($V9,[2,10]),{14:55,23:101,30:$Vg,36:[1,99],38:$Vh,42:100,48:53,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,59:$Vo,69:$Vp},{44:[1,102]},{31:[1,104],36:[1,103]},{30:[1,105]},{30:[2,52]},{30:[2,53]},{30:[2,54]},{30:[2,55]},{25:[1,106]},{30:[2,57]},{15:[1,107],37:$Vy,38:$Vz,49:$VA,57:$VB,58:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL},{20:[1,108]},o($Vf,[2,28]),{15:[1,109],22:[1,110],31:$Ve},{15:[1,111],37:$Vy,38:$Vz,49:$VA,57:$VB,58:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL},{27:[1,112]},{15:[1,113],37:$Vy,38:$Vz,49:$VA,57:$VB,58:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL},{15:[1,114],37:$Vy,38:$Vz,49:$VA,57:$VB,58:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL},{29:[1,115]},o($Vx,[2,27]),{14:55,23:116,30:$Vg,38:$Vh,48:53,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,59:$Vo,69:$Vp},{14:55,23:117,30:$Vg,38:$Vh,48:53,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,59:$Vo,69:$Vp},{14:55,23:118,30:$Vg,38:$Vh,48:53,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,59:$Vo,69:$Vp},{14:55,23:119,30:$Vg,38:$Vh,48:53,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,59:$Vo,69:$Vp},{14:55,23:120,30:$Vg,38:$Vh,48:53,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,59:$Vo,69:$Vp},{14:55,23:121,30:$Vg,38:$Vh,48:53,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,59:$Vo,69:$Vp},{14:55,23:122,30:$Vg,38:$Vh,48:53,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,59:$Vo,69:$Vp},{14:55,23:123,30:$Vg,38:$Vh,48:53,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,59:$Vo,69:$Vp},{14:55,23:124,30:$Vg,38:$Vh,48:53,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,59:$Vo,69:$Vp},{14:55,23:125,30:$Vg,38:$Vh,48:53,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,59:$Vo,69:$Vp},{14:55,23:126,30:$Vg,38:$Vh,48:53,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,59:$Vo,69:$Vp},{14:55,23:127,30:$Vg,38:$Vh,48:53,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,59:$Vo,69:$Vp},{14:55,23:128,30:$Vg,38:$Vh,48:53,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,59:$Vo,69:$Vp},{14:55,23:129,30:$Vg,38:$Vh,48:53,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,59:$Vo,69:$Vp},{36:[1,130]},{36:[1,131]},{25:[1,132]},{36:[1,133]},{14:55,23:134,30:$Vg,38:$Vh,48:53,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,59:$Vo,69:$Vp},{14:55,23:135,30:$Vg,38:$Vh,48:53,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,59:$Vo,69:$Vp},o($VM,[2,76]),o($VN,[2,86],{37:$Vy,38:$Vz,57:$VB,58:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ}),o($VM,[2,60]),{31:$VO,36:[1,136]},o($VP,[2,47],{37:$Vy,38:$Vz,49:$VA,57:$VB,58:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL}),{2:$VQ,8:143,9:144,16:139,17:140,18:141,19:142,20:$VR,24:$V3,27:$V4,28:$V5,29:$V6,30:$VS,32:$VT,45:138},{44:[1,149]},{20:$Vr,24:$Vs,27:$Vt,28:$Vu,29:$Vv,43:$Vw,47:150},o($VU,[2,51]),{26:[1,151]},o($Vx,[2,18]),{36:[1,152]},o($Vx,[2,19]),{14:55,23:153,30:$Vg,35:[1,154],38:$Vh,48:53,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,59:$Vo,69:$Vp},o($Vx,[2,22]),{36:[1,155]},o($Vx,[2,24]),o($Vx,[2,26]),{36:[1,156]},o($VV,[2,70],{57:$VB,58:$VC,60:$VD}),o($VV,[2,71],{57:$VB,58:$VC,60:$VD}),o($VM,[2,72]),o($VM,[2,73]),o($VM,[2,75]),o($VW,[2,77],{37:$Vy,38:$Vz,57:$VB,58:$VC,60:$VD}),o($VW,[2,78],{37:$Vy,38:$Vz,57:$VB,58:$VC,60:$VD}),o($VW,[2,79],{37:$Vy,38:$Vz,57:$VB,58:$VC,60:$VD}),o($VW,[2,80],{37:$Vy,38:$Vz,57:$VB,58:$VC,60:$VD}),o($VW,[2,81],{37:$Vy,38:$Vz,57:$VB,58:$VC,60:$VD}),o($VW,[2,82],{37:$Vy,38:$Vz,57:$VB,58:$VC,60:$VD}),o([15,31,33,36,40,49,50,67],[2,84],{37:$Vy,38:$Vz,57:$VB,58:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,68:$VL}),o($VN,[2,85],{37:$Vy,38:$Vz,57:$VB,58:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ}),{37:$Vy,38:$Vz,49:$VA,50:[1,157],57:$VB,58:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL},{14:55,23:158,30:$Vg,38:$Vh,48:53,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,59:$Vo,69:$Vp},{14:55,23:159,30:$Vg,38:$Vh,48:53,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,59:$Vo,69:$Vp},{26:[1,160]},{14:55,23:161,30:$Vg,38:$Vh,48:53,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,59:$Vo,69:$Vp},{37:$Vy,38:$Vz,40:[1,162],49:$VA,57:$VB,58:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL},{31:[1,163],37:$Vy,38:$Vz,49:$VA,57:$VB,58:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL},o($VM,[2,61]),{14:55,23:164,30:$Vg,38:$Vh,48:53,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,59:$Vo,69:$Vp},{2:$VQ,8:143,9:144,12:[1,165],16:166,17:140,18:141,19:142,20:$VR,24:$V3,27:$V4,28:$V5,29:$V6,30:$VS,32:$VT},o($VX,[2,59]),o($VX,[2,11]),o($VX,[2,12]),o($VX,[2,13]),o($VX,[2,14]),o($VX,[2,15]),{12:[1,167]},{33:[1,168]},{22:$Vb,37:[1,169],38:[1,170],39:[1,171]},{21:172,30:$Va},{2:$VQ,8:143,9:144,16:139,17:140,18:141,19:142,20:$VR,24:$V3,27:$V4,28:$V5,29:$V6,30:$VS,32:$VT,45:173},{30:[1,174]},{30:[2,56]},{14:55,23:175,30:$Vg,38:$Vh,48:53,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,59:$Vo,69:$Vp},{15:[1,176],37:$Vy,38:$Vz,49:$VA,57:$VB,58:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL},{24:[1,177]},{14:55,23:178,30:$Vg,38:$Vh,48:53,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,59:$Vo,69:$Vp},{14:55,23:179,30:$Vg,38:$Vh,48:53,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,59:$Vo,69:$Vp},{14:55,23:180,30:$Vg,38:$Vh,48:53,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,59:$Vo,69:$Vp},{15:[1,181],37:$Vy,38:$Vz,49:$VA,57:$VB,58:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL},{15:[1,182],37:$Vy,38:$Vz,49:$VA,57:$VB,58:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL},{36:[1,183]},{15:[1,184],37:$Vy,38:$Vz,49:$VA,57:$VB,58:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL},o($VM,[2,87],{39:[1,185]}),{14:55,23:186,30:$Vg,38:$Vh,48:53,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,59:$Vo,69:$Vp},o($VP,[2,46],{37:$Vy,38:$Vz,49:$VA,57:$VB,58:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL}),o($V9,[2,48]),o($VX,[2,58]),o($VX,[2,16]),{14:55,23:187,30:$Vg,38:$Vh,48:53,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,59:$Vo,69:$Vp},{37:[1,188]},{38:[1,189]},{14:55,23:190,30:$Vg,38:$Vh,48:53,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,59:$Vo,69:$Vp},{15:$Vc,22:$Vd,31:$Ve,39:[1,191]},{2:$VQ,8:143,9:144,12:[1,192],16:166,17:140,18:141,19:142,20:$VR,24:$V3,27:$V4,28:$V5,29:$V6,30:$VS,32:$VT},o($VU,[2,50]),{15:[1,193],37:$Vy,38:$Vz,49:$VA,57:$VB,58:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL},o($Vx,[2,20]),{25:[1,194]},{15:[1,195],37:$Vy,38:$Vz,49:$VA,57:$VB,58:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL},{15:[1,196],37:$Vy,38:$Vz,49:$VA,57:$VB,58:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL},o([15,31,33,36,40,49,50],[2,62],{37:$Vy,38:$Vz,57:$VB,58:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL}),o($Vx,[2,33]),o($Vx,[2,35]),{14:55,23:197,30:$Vg,38:$Vh,48:53,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,59:$Vo,69:$Vp},o($Vx,[2,39]),{14:55,23:198,30:$Vg,38:$Vh,48:53,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,59:$Vo,69:$Vp},{36:[1,199],37:$Vy,38:$Vz,49:$VA,57:$VB,58:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL},{15:[1,200],33:[1,201],37:$Vy,38:$Vz,49:$VA,57:$VB,58:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL},{15:[1,202]},{15:[1,203]},{37:$Vy,38:$Vz,40:[1,204],49:$VA,57:$VB,58:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL},{40:[1,205]},o($V9,[2,49]),o($Vx,[2,32]),{26:[1,206]},o($Vx,[2,38]),o($Vx,[2,34]),{15:[1,207],37:$Vy,38:$Vz,49:$VA,57:$VB,58:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL},{37:$Vy,38:$Vz,40:[1,208],49:$VA,57:$VB,58:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL},o($VM,[2,74]),o($VX,[2,30]),{34:[1,209]},o($VX,[2,40]),o($VX,[2,41]),{22:[1,210]},{22:[1,211],39:[1,212]},{36:[1,213]},o($Vx,[2,37]),o($VM,[2,88]),{15:[1,214]},{14:55,23:215,30:$Vg,38:$Vh,48:53,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,59:$Vo,69:$Vp},{41:[1,216]},{40:[1,217]},{14:55,23:218,30:$Vg,38:$Vh,48:53,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,59:$Vo,69:$Vp},o($VX,[2,31]),{15:[1,219],37:$Vy,38:$Vz,49:$VA,57:$VB,58:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL},{20:[1,220]},{22:[1,221]},{15:[1,222],37:$Vy,38:$Vz,49:$VA,57:$VB,58:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL},o($VX,[2,45]),{39:[1,223]},{41:[1,224]},o($Vx,[2,36]),{14:55,23:101,30:$Vg,38:$Vh,42:225,48:53,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,59:$Vo,69:$Vp},{20:[1,226]},{31:$VO,40:[1,227]},{39:[1,228]},{15:[1,229]},{14:55,23:101,30:$Vg,38:$Vh,39:[1,231],42:230,48:53,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,59:$Vo,69:$Vp},o($VX,[2,42]),{31:$VO,40:[1,232]},{14:55,23:101,30:$Vg,38:$Vh,42:233,48:53,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,59:$Vo,69:$Vp},{39:[1,234]},{31:$VO,40:[1,235]},{14:55,23:101,30:$Vg,38:$Vh,42:236,48:53,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,59:$Vo,69:$Vp},{40:[1,237]},{31:$VO,40:[1,238]},{39:[1,239]},{15:[1,240]},{39:[1,241]},o($VX,[2,43]),{14:55,23:101,30:$Vg,38:$Vh,42:242,48:53,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,56:$Vn,59:$Vo,69:$Vp},{31:$VO,40:[1,243]},{40:[1,244]},{15:[1,245]},o($VX,[2,44])],
defaultActions: {17:[2,1],61:[2,52],62:[2,53],63:[2,54],64:[2,55],66:[2,57],151:[2,56]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    var cadena="";
    var listaDeErrores=[];
    const Error = require("../Interprete/instruccion/Errores.js");

    //Dato Asociado
    const {TipoDato} = require("../Interprete/Expresion.js");

    //Expresion:
    const Dato = require("../Interprete/exprecion/Dato.js");
    const Aritmetica = require("../Interprete/exprecion/Aritmeticas.js");
    const Ternario = require("../Interprete/exprecion/Ternarios.js");
    const Negativo = require("../Interprete/exprecion/Negativo.js");
    const Casteo = require("../Interprete/exprecion/Casteos.js");
    const Incre_Decre = require("../Interprete/exprecion/Incre_Decre.js")
    const CallFuncion = require("../Interprete/Funciones/CallFuncion.js");

    //Instruccion:
    const Print = require("../Interprete/instruccion/Print.js");
    const Declarar = require("../Interprete/instruccion/Declarar.js");
    const Vectores = require("../Interprete/instruccion/Vectores.js")
    const AccesoVector = require("../Interprete/instruccion/AccesoVector.js");
    const ReasignarVector = require("../Interprete/instruccion/ReasignarVector.js");
    const Execute = require("../Interprete/Funciones/Execute.js");
    const DecFuncion = require("../Interprete/Funciones/DecFuncion.js");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// comentario de linea
break;
case 1:// comentario multiples lineas
break;
case 2: return 32; 
break;
case 3: return 34; 
break;
case 4: return 59; 
break;
case 5: return 24; 
break;
case 6: return 41; 
break;
case 7: return 43; 
break;
case 8: return 13; 
break;
case 9: return 54; 
break;
case 10: return 55; 
break;
case 11: return 20; 
break;
case 12: return 24; 
break;
case 13: return 26; 
break;
case 14: return 27; 
break;
case 15: return 28; 
break;
case 16: return 29; 
break;
case 17: return 62; 
break;
case 18: return 61; 
break;
case 19: return 22; 
break;
case 20: return 63; 
break;
case 21: return 33; 
break;
case 22: return 64; 
break;
case 23: return 65; 
break;
case 24: return 66; 
break;
case 25: return 67; 
break;
case 26: return 68; 
break;
case 27: return 69; 
break;
case 28: return 25; 
break;
case 29: return 50; 
break;
case 30: return 15; 
break;
case 31: return 31; 
break;
case 32: return 35; 
break;
case 33: return 36; 
break;
case 34: return 37; 
break;
case 35: return 38; 
break;
case 36: return 57; 
break;
case 37: return 58; 
break;
case 38: return 60; 
break;
case 39: return 49; 
break;
case 40: return 39; 
break;
case 41: return 40; 
break;
case 42: return 44; 
break;
case 43: return 12; 
break;
case 44: return 52; 
break;
case 45: return 51; 
break;
case 46: return 30; 
break;
case 47: cadena=""; this.begin("string"); 
break;
case 48: cadena+=yy_.yytext; 
break;
case 49: cadena+="\""; 
break;
case 50: cadena+="\n"; 
break;
case 51: cadena+=" ";  
break;
case 52: cadena+="\t"; 
break;
case 53: cadena+="\\"; 
break;
case 54: cadena+="\'"; 
break;
case 55: yy_.yytext=cadena; this.popState(); return 56; 
break;
case 56: return 53 
break;
case 57:/* Espacios se ignoran */
break;
case 58:return 5;
break;
case 59: var nuevo_error = new Error("Error Léxico","Caracter Incorrecto: "+yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); listaDeErrores.push(nuevo_error); 
    console.error('Error léxico: \"' + yy_.yytext + '\", linea: ' + yy_.yylloc.first_line + ', columna: ' + yy_.yylloc.first_column);
    return 'INVALIDO' 
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:pow\b)/i,/^(?:std\b)/i,/^(?:new\b)/i,/^(?:void\b)/i,/^(?:execute\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:int\b)/i,/^(?:std\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:bool\b)/i,/^(?:double\b)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:=)/i,/^(?:<=)/i,/^(?:<<)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:::)/i,/^(?::)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\?)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:(([0-9]+[.][0-9]+)))/i,/^(?:([0-9]+))/i,/^(?:([a-zA-Z][a-zA-Z0-9_]*))/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\s)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:["])/i,/^(?:["\'"]([^"\'"])?["\'"])/i,/^(?:[ \s\r\n\t])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[48,49,50,51,52,53,54,55],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}