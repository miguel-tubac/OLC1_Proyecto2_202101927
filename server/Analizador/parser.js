/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,11],$V2=[1,12],$V3=[1,13],$V4=[1,14],$V5=[1,15],$V6=[1,16],$V7=[1,17],$V8=[2,5,14,19,22,23,24,25,27],$V9=[1,22],$Va=[1,35],$Vb=[16,17,26,34],$Vc=[1,50],$Vd=[1,53],$Ve=[1,45],$Vf=[1,46],$Vg=[1,47],$Vh=[1,48],$Vi=[1,49],$Vj=[1,51],$Vk=[1,52],$Vl=[1,55],$Vm=[1,71],$Vn=[1,72],$Vo=[1,84],$Vp=[1,73],$Vq=[1,74],$Vr=[1,75],$Vs=[1,76],$Vt=[1,77],$Vu=[1,78],$Vv=[1,79],$Vw=[1,80],$Vx=[1,81],$Vy=[1,82],$Vz=[1,83],$VA=[16,26,28,31,32,33,35,39,40,47,48,50,51,52,53,54,55,56,57,58],$VB=[16,26,28,31,35,39,40,57,58],$VC=[16,26,28,31,32,33,35,39,40,51,52,53,54,55,56,57,58],$VD=[16,26,28,31,35,39,40,51,52,53,54,55,56,57,58],$VE=[1,178],$VF=[26,35];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"lista_instrucciones":4,"EOF":5,"instruccion":6,"funciones":7,"variables":8,"casteos":9,"PYC":10,"print":11,"incre_decre":12,"declarar_vector":13,"INT":14,"rep_iden":15,"PUNTOYCOMA":16,"IGUAL":17,"expresion":18,"STD":19,"DOBLEDOSPUNTOS":20,"STRING":21,"CHAR":22,"BOOL":23,"DOUBLE":24,"ID":25,"COMA":26,"COUT":27,"DOBLEMENOR":28,"ENDL":29,"PARENTESIS_A":30,"PARENTESIS_C":31,"MAS":32,"MENOS":33,"CORCHETE_A":34,"CORCHETE_C":35,"NEW":36,"lista_valores":37,"ternario":38,"INTEROGACION":39,"DOSPUNTOS":40,"ENTERO":41,"NUMERODECIMA":42,"CARACTER":43,"TRUE":44,"FALSE":45,"TEXTO":46,"MULTI":47,"DIVICION":48,"POW":49,"MODULO":50,"DOBLEIGUAL":51,"DIFERENCIACION":52,"MENORIGUAL":53,"MENOR":54,"MAYORIGUAL":55,"MAYOR":56,"OR":57,"AND":58,"NOT":59,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"PYC",14:"INT",16:"PUNTOYCOMA",17:"IGUAL",19:"STD",20:"DOBLEDOSPUNTOS",21:"STRING",22:"CHAR",23:"BOOL",24:"DOUBLE",25:"ID",26:"COMA",27:"COUT",28:"DOBLEMENOR",29:"ENDL",30:"PARENTESIS_A",31:"PARENTESIS_C",32:"MAS",33:"MENOS",34:"CORCHETE_A",35:"CORCHETE_C",36:"NEW",39:"INTEROGACION",40:"DOSPUNTOS",41:"ENTERO",42:"NUMERODECIMA",43:"CARACTER",44:"TRUE",45:"FALSE",46:"TEXTO",47:"MULTI",48:"DIVICION",49:"POW",50:"MODULO",51:"DOBLEIGUAL",52:"DIFERENCIACION",53:"MENORIGUAL",54:"MENOR",55:"MAYORIGUAL",56:"MAYOR",57:"OR",58:"AND",59:"NOT"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,2],[7,1],[7,1],[7,1],[8,3],[8,5],[8,5],[8,7],[8,3],[8,5],[8,3],[8,5],[8,3],[8,5],[8,4],[15,3],[15,1],[11,4],[11,6],[9,8],[9,7],[9,8],[9,7],[9,12],[9,9],[9,8],[9,7],[12,4],[12,4],[13,11],[13,16],[13,20],[13,7],[37,3],[37,1],[38,5],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,3],[18,3],[18,3],[18,3],[18,6],[18,3],[18,2],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,1],[18,3],[18,3],[18,2],[18,4],[18,7]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 var final={'errores': listaDeErrores}; this.$ = $$[$0-1], final; listaDeErrores=[] ; return this.$; 
break;
case 2:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3:
 this.$ = []; this.$.push($$[$0]); 
break;
case 4: case 5: case 6: case 8: case 9: case 10:
 this.$ = $$[$0] 
break;
case 7:
 var nuevo_error = new Error("Error Sintáctico","Recuperado con: "+yytext, this._$.first_line, this._$.first_column); listaDeErrores.push(nuevo_error);
                            console.error('Error sintáctico: ' + yytext + ',  linea: ' + this._$.first_line + ', columna: ' + this._$.first_column);
break;
case 11:
 this.$ = new Declarar($$[$0-1], TipoDato.INT, "ERROR_1", _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 12:
 this.$ = new Declarar($$[$0-3], TipoDato.INT, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 13:
 this.$ = new Declarar($$[$0-1], TipoDato.CADENA, "ERROR_2", _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 14:
 this.$ = new Declarar($$[$0-3], TipoDato.CADENA, $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 15:
 this.$ = new Declarar($$[$0-1], TipoDato.CHAR, "ERROR_3", _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 16:
 this.$ = new Declarar($$[$0-3], TipoDato.CHAR, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 17:
 this.$ = new Declarar($$[$0-1], TipoDato.BOOLEAN, "ERROR_4", _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 18:
 this.$ = new Declarar($$[$0-3], TipoDato.BOOLEAN, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 19:
 this.$ = new Declarar($$[$0-1], TipoDato.DOUBLE, "ERROR_5", _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 20:
 this.$ = new Declarar($$[$0-3], TipoDato.DOUBLE, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 21:
 this.$ = new Declarar($$[$0-3], $$[$0-1], "RENOMBRAR", _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 22:
 this.$ = $$[$0-2] ; this.$.push(new Dato($$[$0], TipoDato.ID, _$[$0-2].first_line, _$[$0-2].first_column)); 
break;
case 23:
 this.$ = [] ;  this.$.push(new Dato($$[$0], TipoDato.ID, _$[$0].first_line, _$[$0].first_column)); 
break;
case 24:
 this.$ = new Print($$[$0-1], null, _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 25:
 this.$ = new Print($$[$0-3], TipoDato.ENDL, _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 26:
 this.$ = new Casteo($$[$0-6], TipoDato.INT, $$[$0-1], "SI", _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 27:
 this.$ = new Casteo($$[$0-6], TipoDato.INT, $$[$0-1], "NO", _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 28:
 this.$ = new Casteo($$[$0-6], TipoDato.DOUBLE, $$[$0-1], "SI", _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 29:
 this.$ = new Casteo($$[$0-6], TipoDato.DOUBLE, $$[$0-1], "NO", _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 30:
 this.$ = new Casteo($$[$0-8], TipoDato.CADENA, $$[$0-1], "SI", _$[$0-11].first_line, _$[$0-11].first_column); 
break;
case 31:
 this.$ = new Casteo($$[$0-8], TipoDato.CADENA, $$[$0-1], "NO", _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 32:
 this.$ = new Casteo($$[$0-6], TipoDato.CHAR, $$[$0-1], "SI", _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 33:
 this.$ = new Casteo($$[$0-6], TipoDato.CHAR, $$[$0-1], "NO", _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 34:
 this.$ = new Incre_Decre($$[$0-3], "++", _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 35:
 this.$ = new Incre_Decre($$[$0-3], "--", _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 36:
 this.$ = new Vectores($$[$0-9], TipoDato.INT, $$[$0-2], _$[$0-10].first_line, _$[$0-10].first_column); 
break;
case 37: case 38:
  
break;
case 39:
 this.$ = new ReasignarVector($$[$0-6], $$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 40:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 41:
this.$ = [$$[$0]];
break;
case 42:
 this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 43:
 this.$ = new Dato($$[$0], TipoDato.INT, _$[$0].first_line, _$[$0].first_column); 
break;
case 44:
 this.$ = new Dato($$[$0], TipoDato.DOUBLE, _$[$0].first_line, _$[$0].first_column); 
break;
case 45:
 this.$ = new Dato($$[$0].replace(/^'|'$/g, ''), TipoDato.CHAR, _$[$0].first_line, _$[$0].first_column); 
break;
case 46: case 47:
 this.$ = new Dato($$[$0], TipoDato.BOOLEAN, _$[$0].first_line, _$[$0].first_column); 
break;
case 48:
 this.$ = new Dato($$[$0], TipoDato.ID, _$[$0].first_line, _$[$0].first_column); 
break;
case 49:
 this.$ = new Dato($$[$0], TipoDato.CADENA, _$[$0].first_line, _$[$0].first_column); 
break;
case 50: case 51: case 52: case 53: case 55: case 57: case 58: case 59: case 60: case 61: case 62: case 64: case 65:
 this.$ = new Aritmetica($$[$0-2] ,$$[$0-1] ,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 54:
 this.$ = new Aritmetica($$[$0-3] ,"pow" ,$$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 56:
 this.$ = new Negativo($$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 63:
this.$ = $$[$0];
break;
case 66:
 this.$ = new Aritmetica($$[$0] ,$$[$0-1] ,$$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 67:
 this.$ = new AccesoVector($$[$0-3], $$[$0-1], "null", _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 68:
 this.$ = new AccesoVector($$[$0-6], $$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,11:8,12:9,13:10,14:$V1,19:$V2,22:$V3,23:$V4,24:$V5,25:$V6,27:$V7},{1:[3]},{2:$V0,5:[1,18],6:19,7:4,8:5,9:6,11:8,12:9,13:10,14:$V1,19:$V2,22:$V3,23:$V4,24:$V5,25:$V6,27:$V7},o($V8,[2,3]),o($V8,[2,4]),o($V8,[2,5]),o($V8,[2,6]),{10:[1,20]},o($V8,[2,8]),o($V8,[2,9]),o($V8,[2,10]),{15:21,25:$V9},{20:[1,23]},{15:24,25:$V9},{15:25,25:$V9},{15:26,25:$V9},{17:[1,27],32:[1,28],33:[1,29],34:[1,30]},{28:[1,31]},{1:[2,1]},o($V8,[2,2]),o($V8,[2,7]),{16:[1,32],17:[1,33],26:$Va,34:[1,34]},o($Vb,[2,23]),{21:[1,36]},{16:[1,37],17:[1,38],26:$Va},{16:[1,39],17:[1,40],26:$Va},{16:[1,41],17:[1,42],26:$Va},{18:43,25:$Vc,30:[1,44],33:$Vd,38:54,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,49:$Vk,59:$Vl},{32:[1,56]},{33:[1,57]},{18:58,25:$Vc,33:$Vd,38:54,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,49:$Vk,59:$Vl},{18:59,25:$Vc,33:$Vd,38:54,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,49:$Vk,59:$Vl},o($V8,[2,11]),{18:60,25:$Vc,30:[1,61],33:$Vd,38:54,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,49:$Vk,59:$Vl},{35:[1,62]},{25:[1,63]},{15:64,25:$V9},o($V8,[2,15]),{18:65,25:$Vc,30:[1,66],33:$Vd,38:54,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,49:$Vk,59:$Vl},o($V8,[2,17]),{18:67,25:$Vc,33:$Vd,38:54,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,49:$Vk,59:$Vl},o($V8,[2,19]),{18:68,25:$Vc,30:[1,69],33:$Vd,38:54,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,49:$Vk,59:$Vl},{16:[1,70],32:$Vm,33:$Vn,39:$Vo,47:$Vp,48:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz},{14:[1,85],19:[1,87],22:[1,88],24:[1,86]},o($VA,[2,43]),o($VA,[2,44]),o($VA,[2,45]),o($VA,[2,46]),o($VA,[2,47]),o($VA,[2,48],{34:[1,89]}),o($VA,[2,49]),{30:[1,90]},{18:91,25:$Vc,33:$Vd,38:54,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,49:$Vk,59:$Vl},o($VA,[2,63]),{18:92,25:$Vc,33:$Vd,38:54,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,49:$Vk,59:$Vl},{16:[1,93]},{16:[1,94]},{32:$Vm,33:$Vn,35:[1,95],39:$Vo,47:$Vp,48:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz},{16:[1,96],28:[1,97],32:$Vm,33:$Vn,39:$Vo,47:$Vp,48:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz},{16:[1,98],32:$Vm,33:$Vn,39:$Vo,47:$Vp,48:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz},{14:[1,99]},{17:[1,100],34:[1,101]},o($Vb,[2,22]),{16:[1,102],17:[1,103],26:$Va},{16:[1,104],32:$Vm,33:$Vn,39:$Vo,47:$Vp,48:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz},{22:[1,105]},{16:[1,106],32:$Vm,33:$Vn,39:$Vo,47:$Vp,48:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz},{16:[1,107],32:$Vm,33:$Vn,39:$Vo,47:$Vp,48:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz},{24:[1,108]},o($V8,[2,21]),{18:109,25:$Vc,33:$Vd,38:54,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,49:$Vk,59:$Vl},{18:110,25:$Vc,33:$Vd,38:54,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,49:$Vk,59:$Vl},{18:111,25:$Vc,33:$Vd,38:54,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,49:$Vk,59:$Vl},{18:112,25:$Vc,33:$Vd,38:54,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,49:$Vk,59:$Vl},{18:113,25:$Vc,33:$Vd,38:54,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,49:$Vk,59:$Vl},{18:114,25:$Vc,33:$Vd,38:54,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,49:$Vk,59:$Vl},{18:115,25:$Vc,33:$Vd,38:54,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,49:$Vk,59:$Vl},{18:116,25:$Vc,33:$Vd,38:54,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,49:$Vk,59:$Vl},{18:117,25:$Vc,33:$Vd,38:54,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,49:$Vk,59:$Vl},{18:118,25:$Vc,33:$Vd,38:54,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,49:$Vk,59:$Vl},{18:119,25:$Vc,33:$Vd,38:54,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,49:$Vk,59:$Vl},{18:120,25:$Vc,33:$Vd,38:54,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,49:$Vk,59:$Vl},{18:121,25:$Vc,33:$Vd,38:54,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,49:$Vk,59:$Vl},{18:122,25:$Vc,33:$Vd,38:54,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,49:$Vk,59:$Vl},{31:[1,123]},{31:[1,124]},{20:[1,125]},{31:[1,126]},{18:127,25:$Vc,33:$Vd,38:54,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,49:$Vk,59:$Vl},{18:128,25:$Vc,33:$Vd,38:54,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,49:$Vk,59:$Vl},o($VA,[2,56]),o($VB,[2,66],{32:$Vm,33:$Vn,47:$Vp,48:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx}),o($V8,[2,34]),o($V8,[2,35]),{17:[1,129]},o($V8,[2,24]),{29:[1,130]},o($V8,[2,12]),{31:[1,131]},{36:[1,132]},{35:[1,133]},o($V8,[2,13]),{18:134,25:$Vc,30:[1,135],33:$Vd,38:54,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,49:$Vk,59:$Vl},o($V8,[2,16]),{31:[1,136]},o($V8,[2,18]),o($V8,[2,20]),{31:[1,137]},o($VC,[2,50],{47:$Vp,48:$Vq,50:$Vr}),o($VC,[2,51],{47:$Vp,48:$Vq,50:$Vr}),o($VA,[2,52]),o($VA,[2,53]),o($VA,[2,55]),o($VD,[2,57],{32:$Vm,33:$Vn,47:$Vp,48:$Vq,50:$Vr}),o($VD,[2,58],{32:$Vm,33:$Vn,47:$Vp,48:$Vq,50:$Vr}),o($VD,[2,59],{32:$Vm,33:$Vn,47:$Vp,48:$Vq,50:$Vr}),o($VD,[2,60],{32:$Vm,33:$Vn,47:$Vp,48:$Vq,50:$Vr}),o($VD,[2,61],{32:$Vm,33:$Vn,47:$Vp,48:$Vq,50:$Vr}),o($VD,[2,62],{32:$Vm,33:$Vn,47:$Vp,48:$Vq,50:$Vr}),o([16,26,28,31,35,39,40,57],[2,64],{32:$Vm,33:$Vn,47:$Vp,48:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,58:$Vz}),o($VB,[2,65],{32:$Vm,33:$Vn,47:$Vp,48:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx}),{32:$Vm,33:$Vn,39:$Vo,40:[1,138],47:$Vp,48:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz},{18:139,25:$Vc,33:$Vd,38:54,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,49:$Vk,59:$Vl},{18:140,25:$Vc,33:$Vd,38:54,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,49:$Vk,59:$Vl},{21:[1,141]},{18:142,25:$Vc,33:$Vd,38:54,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,49:$Vk,59:$Vl},{32:$Vm,33:$Vn,35:[1,143],39:$Vo,47:$Vp,48:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz},{26:[1,144],32:$Vm,33:$Vn,39:$Vo,47:$Vp,48:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz},{18:145,25:$Vc,33:$Vd,38:54,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,49:$Vk,59:$Vl},{16:[1,146]},{18:147,25:$Vc,33:$Vd,38:54,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,49:$Vk,59:$Vl},{14:[1,148]},{17:[1,149]},{16:[1,150],32:$Vm,33:$Vn,39:$Vo,47:$Vp,48:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz},{19:[1,151]},{18:152,25:$Vc,33:$Vd,38:54,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,49:$Vk,59:$Vl},{18:153,25:$Vc,33:$Vd,38:54,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,49:$Vk,59:$Vl},{18:154,25:$Vc,33:$Vd,38:54,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,49:$Vk,59:$Vl},{16:[1,155],32:$Vm,33:$Vn,39:$Vo,47:$Vp,48:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz},{16:[1,156],32:$Vm,33:$Vn,39:$Vo,47:$Vp,48:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz},{31:[1,157]},{16:[1,158],32:$Vm,33:$Vn,39:$Vo,47:$Vp,48:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz},o($VA,[2,67],{34:[1,159]}),{18:160,25:$Vc,33:$Vd,38:54,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,49:$Vk,59:$Vl},{16:[1,161],32:$Vm,33:$Vn,39:$Vo,47:$Vp,48:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz},o($V8,[2,25]),{16:[1,162],32:$Vm,33:$Vn,39:$Vo,47:$Vp,48:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz},{34:[1,163]},{36:[1,164]},o($V8,[2,14]),{20:[1,165]},{16:[1,166],32:$Vm,33:$Vn,39:$Vo,47:$Vp,48:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz},{16:[1,167],32:$Vm,33:$Vn,39:$Vo,47:$Vp,48:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz},o([16,26,28,31,35,39,40],[2,42],{32:$Vm,33:$Vn,47:$Vp,48:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz}),o($V8,[2,27]),o($V8,[2,29]),{18:168,25:$Vc,33:$Vd,38:54,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,49:$Vk,59:$Vl},o($V8,[2,33]),{18:169,25:$Vc,33:$Vd,38:54,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,49:$Vk,59:$Vl},{31:[1,170],32:$Vm,33:$Vn,39:$Vo,47:$Vp,48:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz},o($V8,[2,39]),o($V8,[2,26]),{18:172,25:$Vc,33:$Vd,37:171,38:54,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,49:$Vk,59:$Vl},{14:[1,173]},{21:[1,174]},o($V8,[2,32]),o($V8,[2,28]),{16:[1,175],32:$Vm,33:$Vn,39:$Vo,47:$Vp,48:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz},{32:$Vm,33:$Vn,35:[1,176],39:$Vo,47:$Vp,48:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz},o($VA,[2,54]),{26:$VE,35:[1,177]},o($VF,[2,41],{32:$Vm,33:$Vn,39:$Vo,47:$Vp,48:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz}),{34:[1,179]},{31:[1,180]},o($V8,[2,31]),o($VA,[2,68]),{16:[1,181]},{18:182,25:$Vc,33:$Vd,38:54,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,49:$Vk,59:$Vl},{18:172,25:$Vc,33:$Vd,34:[1,184],37:183,38:54,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,49:$Vk,59:$Vl},{18:185,25:$Vc,33:$Vd,38:54,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,49:$Vk,59:$Vl},o($V8,[2,36]),o($VF,[2,40],{32:$Vm,33:$Vn,39:$Vo,47:$Vp,48:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz}),{26:$VE,35:[1,186]},{18:172,25:$Vc,33:$Vd,37:187,38:54,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,49:$Vk,59:$Vl},{16:[1,188],32:$Vm,33:$Vn,39:$Vo,47:$Vp,48:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz},{34:[1,189]},{26:$VE,35:[1,190]},o($V8,[2,30]),{18:172,25:$Vc,33:$Vd,37:191,38:54,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,49:$Vk,59:$Vl},{35:[1,192]},{26:$VE,35:[1,193]},{34:[1,194]},{16:[1,195]},{34:[1,196]},o($V8,[2,37]),{18:172,25:$Vc,33:$Vd,37:197,38:54,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,49:$Vk,59:$Vl},{26:$VE,35:[1,198]},{35:[1,199]},{16:[1,200]},o($V8,[2,38])],
defaultActions: {18:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    var cadena="";
    var listaDeErrores=[];
    const Error = require("../Interprete/instruccion/Errores.js");

    //Dato Asociado
    const {TipoDato} = require("../Interprete/Expresion.js");

    //Expresion:
    const Dato = require("../Interprete/exprecion/Dato.js");
    const Aritmetica = require("../Interprete/exprecion/Aritmeticas.js");
    const Ternario = require("../Interprete/exprecion/Ternarios.js");
    const Negativo = require("../Interprete/exprecion/Negativo.js");
    const Casteo = require("../Interprete/exprecion/Casteos.js");
    const Incre_Decre = require("../Interprete/exprecion/Incre_Decre.js")

    //Instruccion:
    const Print = require("../Interprete/instruccion/Print.js");
    const Declarar = require("../Interprete/instruccion/Declarar.js");
    const Vectores = require("../Interprete/instruccion/Vectores.js")
    const AccesoVector = require("../Interprete/instruccion/AccesoVector.js");
    const ReasignarVector = require("../Interprete/instruccion/ReasignarVector.js");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// comentario de linea
break;
case 1:// comentario multiples lineas
break;
case 2: return 27; 
break;
case 3: return 29; 
break;
case 4: return 49; 
break;
case 5: return 19; 
break;
case 6: return 36; 
break;
case 7: return 44; 
break;
case 8: return 45; 
break;
case 9: return 14; 
break;
case 10: return 19; 
break;
case 11: return 21; 
break;
case 12: return 22; 
break;
case 13: return 23; 
break;
case 14: return 24; 
break;
case 15: return 52; 
break;
case 16: return 51; 
break;
case 17: return 17; 
break;
case 18: return 53; 
break;
case 19: return 28; 
break;
case 20: return 54; 
break;
case 21: return 55; 
break;
case 22: return 56; 
break;
case 23: return 57; 
break;
case 24: return 58; 
break;
case 25: return 59; 
break;
case 26: return 20; 
break;
case 27: return 40; 
break;
case 28: return 16; 
break;
case 29: return 26; 
break;
case 30: return 30; 
break;
case 31: return 31; 
break;
case 32: return 32; 
break;
case 33: return 33; 
break;
case 34: return 47; 
break;
case 35: return 48; 
break;
case 36: return 50; 
break;
case 37: return 39; 
break;
case 38: return 34; 
break;
case 39: return 35; 
break;
case 40: return 42; 
break;
case 41: return 41; 
break;
case 42: return 25; 
break;
case 43: cadena=""; this.begin("string"); 
break;
case 44: cadena+=yy_.yytext; 
break;
case 45: cadena+="\""; 
break;
case 46: cadena+="\n"; 
break;
case 47: cadena+=" ";  
break;
case 48: cadena+="\t"; 
break;
case 49: cadena+="\\"; 
break;
case 50: cadena+="\'"; 
break;
case 51: yy_.yytext=cadena; this.popState(); return 46; 
break;
case 52: return 43 
break;
case 53:/* Espacios se ignoran */
break;
case 54:return 5;
break;
case 55: var nuevo_error = new Error("Error Léxico","Caracter Incorrecto: "+yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); listaDeErrores.push(nuevo_error); 
    console.error('Error léxico: \"' + yy_.yytext + '\", linea: ' + yy_.yylloc.first_line + ', columna: ' + yy_.yylloc.first_column);
    return 'INVALIDO' 
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:pow\b)/i,/^(?:std\b)/i,/^(?:new\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:int\b)/i,/^(?:std\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:bool\b)/i,/^(?:double\b)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:=)/i,/^(?:<=)/i,/^(?:<<)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:::)/i,/^(?::)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\?)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:(([0-9]+[.][0-9]+)))/i,/^(?:([0-9]+))/i,/^(?:([a-zA-Z][a-zA-Z0-9_]*))/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\s)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:["])/i,/^(?:["\'"]([^"\'"])?["\'"])/i,/^(?:[ \s\r\n\t])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[44,45,46,47,48,49,50,51],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,52,53,54,55],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}