/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,10],$V2=[1,11],$V3=[1,12],$V4=[1,13],$V5=[1,14],$V6=[1,15],$V7=[1,9],$V8=[2,5,17,22,25,26,27,28,41],$V9=[1,21],$Va=[1,26],$Vb=[1,29],$Vc=[1,30],$Vd=[1,31],$Ve=[19,20,29,37],$Vf=[1,46],$Vg=[1,49],$Vh=[1,41],$Vi=[1,42],$Vj=[1,43],$Vk=[1,44],$Vl=[1,45],$Vm=[1,47],$Vn=[1,48],$Vo=[1,51],$Vp=[2,5,16,17,22,25,26,27,28,41],$Vq=[1,66],$Vr=[1,67],$Vs=[1,79],$Vt=[1,68],$Vu=[1,69],$Vv=[1,70],$Vw=[1,71],$Vx=[1,72],$Vy=[1,73],$Vz=[1,74],$VA=[1,75],$VB=[1,76],$VC=[1,77],$VD=[1,78],$VE=[19,28,29,31,34,35,36,38,46,47,54,55,57,58,59,60,61,62,63,64,65],$VF=[19,28,29,31,34,38,46,47,64,65],$VG=[1,129],$VH=[1,132],$VI=[1,131],$VJ=[1,130],$VK=[29,34],$VL=[19,28,29,31,34,35,36,38,46,47,58,59,60,61,62,63,64,65],$VM=[19,28,29,31,34,38,46,47,58,59,60,61,62,63,64,65],$VN=[1,210],$VO=[29,38];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"lista_instrucciones":4,"EOF":5,"instruccion":6,"delcarar_metodo":7,"variables":8,"casteos":9,"llamada_metodo":10,"PYC":11,"cuerpo":12,"print":13,"incre_decre":14,"declarar_vector":15,"LLAVE_C":16,"INT":17,"rep_iden":18,"PUNTOYCOMA":19,"IGUAL":20,"expresion":21,"STD":22,"DOBLEDOSPUNTOS":23,"STRING":24,"CHAR":25,"BOOL":26,"DOUBLE":27,"ID":28,"COMA":29,"COUT":30,"DOBLEMENOR":31,"ENDL":32,"PARENTESIS_A":33,"PARENTESIS_C":34,"MAS":35,"MENOS":36,"CORCHETE_A":37,"CORCHETE_C":38,"NEW":39,"lista_valores":40,"VOID":41,"LLAVE_A":42,"instrucciones_metodo":43,"parametros":44,"ternario":45,"INTEROGACION":46,"DOSPUNTOS":47,"ENTERO":48,"NUMERODECIMA":49,"CARACTER":50,"TRUE":51,"FALSE":52,"TEXTO":53,"MULTI":54,"DIVICION":55,"POW":56,"MODULO":57,"DOBLEIGUAL":58,"DIFERENCIACION":59,"MENORIGUAL":60,"MENOR":61,"MAYORIGUAL":62,"MAYOR":63,"OR":64,"AND":65,"NOT":66,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"PYC",16:"LLAVE_C",17:"INT",19:"PUNTOYCOMA",20:"IGUAL",22:"STD",23:"DOBLEDOSPUNTOS",24:"STRING",25:"CHAR",26:"BOOL",27:"DOUBLE",28:"ID",29:"COMA",30:"COUT",31:"DOBLEMENOR",32:"ENDL",33:"PARENTESIS_A",34:"PARENTESIS_C",35:"MAS",36:"MENOS",37:"CORCHETE_A",38:"CORCHETE_C",39:"NEW",41:"VOID",42:"LLAVE_A",46:"INTEROGACION",47:"DOSPUNTOS",48:"ENTERO",49:"NUMERODECIMA",50:"CARACTER",51:"TRUE",52:"FALSE",53:"TEXTO",54:"MULTI",55:"DIVICION",56:"POW",57:"MODULO",58:"DOBLEIGUAL",59:"DIFERENCIACION",60:"MENORIGUAL",61:"MENOR",62:"MAYORIGUAL",63:"MAYOR",64:"OR",65:"AND",66:"NOT"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,2],[12,1],[12,1],[12,1],[12,1],[12,1],[12,2],[8,3],[8,5],[8,5],[8,7],[8,3],[8,5],[8,3],[8,5],[8,3],[8,5],[8,4],[18,3],[18,1],[13,4],[13,6],[9,8],[9,7],[9,8],[9,7],[9,12],[9,9],[9,8],[9,7],[14,4],[14,4],[15,11],[15,16],[15,20],[15,7],[40,3],[40,1],[7,7],[7,8],[44,4],[44,2],[43,1],[10,4],[45,5],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,3],[21,3],[21,3],[21,3],[21,6],[21,3],[21,2],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,1],[21,3],[21,3],[21,2],[21,4],[21,7]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 var final={'errores': listaDeErrores}; this.$ = $$[$0-1], final; listaDeErrores=[] ; return this.$; 
break;
case 2:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3:
 this.$ = []; this.$.push($$[$0]); 
break;
case 4: case 5: case 6: case 7: case 9: case 10: case 11: case 12: case 13: case 50:
 this.$ = $$[$0] 
break;
case 8: case 14:
 var nuevo_error = new Error("Error Sintáctico","Recuperado con: "+yytext, this._$.first_line, this._$.first_column); listaDeErrores.push(nuevo_error);
                            console.error('Error sintáctico: ' + yytext + ',  linea: ' + this._$.first_line + ', columna: ' + this._$.first_column);
break;
case 15:
 this.$ = new Declarar($$[$0-1], TipoDato.INT, "ERROR_1", _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 16:
 this.$ = new Declarar($$[$0-3], TipoDato.INT, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 17:
 this.$ = new Declarar($$[$0-1], TipoDato.CADENA, "ERROR_2", _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 18:
 this.$ = new Declarar($$[$0-3], TipoDato.CADENA, $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 19:
 this.$ = new Declarar($$[$0-1], TipoDato.CHAR, "ERROR_3", _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 20:
 this.$ = new Declarar($$[$0-3], TipoDato.CHAR, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 21:
 this.$ = new Declarar($$[$0-1], TipoDato.BOOLEAN, "ERROR_4", _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 22:
 this.$ = new Declarar($$[$0-3], TipoDato.BOOLEAN, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 23:
 this.$ = new Declarar($$[$0-1], TipoDato.DOUBLE, "ERROR_5", _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 24:
 this.$ = new Declarar($$[$0-3], TipoDato.DOUBLE, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 25:
 this.$ = new Declarar($$[$0-3], $$[$0-1], "RENOMBRAR", _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 26:
 this.$ = $$[$0-2] ; this.$.push(new Dato($$[$0], TipoDato.ID, _$[$0-2].first_line, _$[$0-2].first_column)); 
break;
case 27:
 this.$ = [] ;  this.$.push(new Dato($$[$0], TipoDato.ID, _$[$0].first_line, _$[$0].first_column)); 
break;
case 28:
 this.$ = new Print($$[$0-1], null, _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 29:
 this.$ = new Print($$[$0-3], TipoDato.ENDL, _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 30:
 this.$ = new Casteo($$[$0-6], TipoDato.INT, $$[$0-1], "SI", _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 31:
 this.$ = new Casteo($$[$0-6], TipoDato.INT, $$[$0-1], "NO", _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 32:
 this.$ = new Casteo($$[$0-6], TipoDato.DOUBLE, $$[$0-1], "SI", _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 33:
 this.$ = new Casteo($$[$0-6], TipoDato.DOUBLE, $$[$0-1], "NO", _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 34:
 this.$ = new Casteo($$[$0-8], TipoDato.CADENA, $$[$0-1], "SI", _$[$0-11].first_line, _$[$0-11].first_column); 
break;
case 35:
 this.$ = new Casteo($$[$0-8], TipoDato.CADENA, $$[$0-1], "NO", _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 36:
 this.$ = new Casteo($$[$0-6], TipoDato.CHAR, $$[$0-1], "SI", _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 37:
 this.$ = new Casteo($$[$0-6], TipoDato.CHAR, $$[$0-1], "NO", _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 38:
 this.$ = new Incre_Decre($$[$0-3], "++", _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 39:
 this.$ = new Incre_Decre($$[$0-3], "--", _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 40:
 this.$ = new Vectores($$[$0-9], TipoDato.INT, $$[$0-2], _$[$0-10].first_line, _$[$0-10].first_column); 
break;
case 41: case 42: case 47:
  
break;
case 43:
 this.$ = new ReasignarVector($$[$0-6], $$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 44:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 45:
this.$ = [$$[$0]];
break;
case 46:
 this.$ = new MetodSinParame($$[$0-5], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 48:
$$[$0-3].push($$[$0-2]); $$[$0-3].push($$[$0-1]); this.$ = $$[$0-3];
break;
case 49:
this.$ = [$$[$0-1], $$[$0]];
break;
case 51:
 this.$ = new LlamadaMetodo($$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 52:
 this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 53:
 this.$ = new Dato($$[$0], TipoDato.INT, _$[$0].first_line, _$[$0].first_column); 
break;
case 54:
 this.$ = new Dato($$[$0], TipoDato.DOUBLE, _$[$0].first_line, _$[$0].first_column); 
break;
case 55:
 this.$ = new Dato($$[$0].replace(/^'|'$/g, ''), TipoDato.CHAR, _$[$0].first_line, _$[$0].first_column); 
break;
case 56: case 57:
 this.$ = new Dato($$[$0], TipoDato.BOOLEAN, _$[$0].first_line, _$[$0].first_column); 
break;
case 58:
 this.$ = new Dato($$[$0], TipoDato.ID, _$[$0].first_line, _$[$0].first_column); 
break;
case 59:
 this.$ = new Dato($$[$0], TipoDato.CADENA, _$[$0].first_line, _$[$0].first_column); 
break;
case 60: case 61: case 62: case 63: case 65: case 67: case 68: case 69: case 70: case 71: case 72: case 74: case 75:
 this.$ = new Aritmetica($$[$0-2] ,$$[$0-1] ,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 64:
 this.$ = new Aritmetica($$[$0-3] ,"pow" ,$$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 66:
 this.$ = new Negativo($$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 73:
this.$ = $$[$0];
break;
case 76:
 this.$ = new Aritmetica($$[$0] ,$$[$0-1] ,$$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 77:
 this.$ = new AccesoVector($$[$0-3], $$[$0-1], "null", _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 78:
 this.$ = new AccesoVector($$[$0-6], $$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,17:$V1,22:$V2,25:$V3,26:$V4,27:$V5,28:$V6,41:$V7},{1:[3]},{2:$V0,5:[1,16],6:17,7:4,8:5,9:6,10:7,17:$V1,22:$V2,25:$V3,26:$V4,27:$V5,28:$V6,41:$V7},o($V8,[2,3]),o($V8,[2,4]),o($V8,[2,5]),o($V8,[2,6]),o($V8,[2,7]),{11:[1,18]},{28:[1,19]},{18:20,28:$V9},{23:[1,22]},{18:23,28:$V9},{18:24,28:$V9},{18:25,28:$V9},{20:$Va,33:[1,27]},{1:[2,1]},o($V8,[2,2]),o($V8,[2,8]),{33:[1,28]},{19:$Vb,20:$Vc,29:$Vd},o($Ve,[2,27]),{24:[1,32]},{19:[1,33],20:[1,34],29:$Vd},{19:[1,35],20:[1,36],29:$Vd},{19:[1,37],20:[1,38],29:$Vd},{21:39,28:$Vf,33:[1,40],36:$Vg,45:50,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,56:$Vn,66:$Vo},{34:[1,52]},{21:55,28:$Vf,34:[1,53],36:$Vg,44:54,45:50,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,56:$Vn,66:$Vo},o($Vp,[2,15]),{21:56,28:$Vf,33:[1,57],36:$Vg,45:50,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,56:$Vn,66:$Vo},{28:[1,58]},{18:59,28:$V9},o($Vp,[2,19]),{21:60,28:$Vf,33:[1,61],36:$Vg,45:50,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,56:$Vn,66:$Vo},o($Vp,[2,21]),{21:62,28:$Vf,36:$Vg,45:50,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,56:$Vn,66:$Vo},o($Vp,[2,23]),{21:63,28:$Vf,33:[1,64],36:$Vg,45:50,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,56:$Vn,66:$Vo},{19:[1,65],35:$Vq,36:$Vr,46:$Vs,54:$Vt,55:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD},{17:[1,80],22:[1,82],25:[1,83],27:[1,81]},o($VE,[2,53]),o($VE,[2,54]),o($VE,[2,55]),o($VE,[2,56]),o($VE,[2,57]),o($VE,[2,58],{37:[1,84]}),o($VE,[2,59]),{33:[1,85]},{21:86,28:$Vf,36:$Vg,45:50,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,56:$Vn,66:$Vo},o($VE,[2,73]),{21:87,28:$Vf,36:$Vg,45:50,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,56:$Vn,66:$Vo},{19:[1,88]},{42:[1,89]},{29:[1,91],34:[1,90]},{28:[1,92],35:$Vq,36:$Vr,46:$Vs,54:$Vt,55:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD},{19:[1,93],35:$Vq,36:$Vr,46:$Vs,54:$Vt,55:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD},{17:[1,94]},o($Ve,[2,26]),{19:[1,95],20:[1,96],29:$Vd},{19:[1,97],35:$Vq,36:$Vr,46:$Vs,54:$Vt,55:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD},{25:[1,98]},{19:[1,99],35:$Vq,36:$Vr,46:$Vs,54:$Vt,55:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD},{19:[1,100],35:$Vq,36:$Vr,46:$Vs,54:$Vt,55:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD},{27:[1,101]},o($Vp,[2,25]),{21:102,28:$Vf,36:$Vg,45:50,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,56:$Vn,66:$Vo},{21:103,28:$Vf,36:$Vg,45:50,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,56:$Vn,66:$Vo},{21:104,28:$Vf,36:$Vg,45:50,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,56:$Vn,66:$Vo},{21:105,28:$Vf,36:$Vg,45:50,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,56:$Vn,66:$Vo},{21:106,28:$Vf,36:$Vg,45:50,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,56:$Vn,66:$Vo},{21:107,28:$Vf,36:$Vg,45:50,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,56:$Vn,66:$Vo},{21:108,28:$Vf,36:$Vg,45:50,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,56:$Vn,66:$Vo},{21:109,28:$Vf,36:$Vg,45:50,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,56:$Vn,66:$Vo},{21:110,28:$Vf,36:$Vg,45:50,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,56:$Vn,66:$Vo},{21:111,28:$Vf,36:$Vg,45:50,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,56:$Vn,66:$Vo},{21:112,28:$Vf,36:$Vg,45:50,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,56:$Vn,66:$Vo},{21:113,28:$Vf,36:$Vg,45:50,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,56:$Vn,66:$Vo},{21:114,28:$Vf,36:$Vg,45:50,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,56:$Vn,66:$Vo},{21:115,28:$Vf,36:$Vg,45:50,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,56:$Vn,66:$Vo},{34:[1,116]},{34:[1,117]},{23:[1,118]},{34:[1,119]},{21:120,28:$Vf,36:$Vg,45:50,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,56:$Vn,66:$Vo},{21:121,28:$Vf,36:$Vg,45:50,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,56:$Vn,66:$Vo},o($VE,[2,66]),o($VF,[2,76],{35:$Vq,36:$Vr,54:$Vt,55:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB}),o($V8,[2,51]),{2:$VG,8:127,9:128,12:123,13:124,14:125,15:126,17:$VH,22:$V2,25:$V3,26:$V4,27:$V5,28:$VI,30:$VJ,43:122},{42:[1,133]},{21:134,28:$Vf,36:$Vg,45:50,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,56:$Vn,66:$Vo},o($VK,[2,49]),o($Vp,[2,16]),{34:[1,135]},o($Vp,[2,17]),{21:136,28:$Vf,33:[1,137],36:$Vg,45:50,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,56:$Vn,66:$Vo},o($Vp,[2,20]),{34:[1,138]},o($Vp,[2,22]),o($Vp,[2,24]),{34:[1,139]},o($VL,[2,60],{54:$Vt,55:$Vu,57:$Vv}),o($VL,[2,61],{54:$Vt,55:$Vu,57:$Vv}),o($VE,[2,62]),o($VE,[2,63]),o($VE,[2,65]),o($VM,[2,67],{35:$Vq,36:$Vr,54:$Vt,55:$Vu,57:$Vv}),o($VM,[2,68],{35:$Vq,36:$Vr,54:$Vt,55:$Vu,57:$Vv}),o($VM,[2,69],{35:$Vq,36:$Vr,54:$Vt,55:$Vu,57:$Vv}),o($VM,[2,70],{35:$Vq,36:$Vr,54:$Vt,55:$Vu,57:$Vv}),o($VM,[2,71],{35:$Vq,36:$Vr,54:$Vt,55:$Vu,57:$Vv}),o($VM,[2,72],{35:$Vq,36:$Vr,54:$Vt,55:$Vu,57:$Vv}),o([19,28,29,31,34,38,46,47,64],[2,74],{35:$Vq,36:$Vr,54:$Vt,55:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,65:$VD}),o($VF,[2,75],{35:$Vq,36:$Vr,54:$Vt,55:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB}),{35:$Vq,36:$Vr,46:$Vs,47:[1,140],54:$Vt,55:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD},{21:141,28:$Vf,36:$Vg,45:50,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,56:$Vn,66:$Vo},{21:142,28:$Vf,36:$Vg,45:50,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,56:$Vn,66:$Vo},{24:[1,143]},{21:144,28:$Vf,36:$Vg,45:50,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,56:$Vn,66:$Vo},{35:$Vq,36:$Vr,38:[1,145],46:$Vs,54:$Vt,55:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD},{29:[1,146],35:$Vq,36:$Vr,46:$Vs,54:$Vt,55:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD},{16:[1,147]},{16:[2,50]},{16:[2,9]},{16:[2,10]},{16:[2,11]},{16:[2,12]},{16:[2,13]},{16:[1,148]},{31:[1,149]},{20:$Va,35:[1,150],36:[1,151],37:[1,152]},{18:153,28:$V9},{2:$VG,8:127,9:128,12:123,13:124,14:125,15:126,17:$VH,22:$V2,25:$V3,26:$V4,27:$V5,28:$VI,30:$VJ,43:154},{28:[1,155],35:$Vq,36:$Vr,46:$Vs,54:$Vt,55:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD},{21:156,28:$Vf,36:$Vg,45:50,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,56:$Vn,66:$Vo},{19:[1,157],35:$Vq,36:$Vr,46:$Vs,54:$Vt,55:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD},{22:[1,158]},{21:159,28:$Vf,36:$Vg,45:50,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,56:$Vn,66:$Vo},{21:160,28:$Vf,36:$Vg,45:50,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,56:$Vn,66:$Vo},{21:161,28:$Vf,36:$Vg,45:50,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,56:$Vn,66:$Vo},{19:[1,162],35:$Vq,36:$Vr,46:$Vs,54:$Vt,55:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD},{19:[1,163],35:$Vq,36:$Vr,46:$Vs,54:$Vt,55:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD},{34:[1,164]},{19:[1,165],35:$Vq,36:$Vr,46:$Vs,54:$Vt,55:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD},o($VE,[2,77],{37:[1,166]}),{21:167,28:$Vf,36:$Vg,45:50,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,56:$Vn,66:$Vo},o($V8,[2,46]),{16:[2,14]},{21:168,28:$Vf,36:$Vg,45:50,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,56:$Vn,66:$Vo},{35:[1,169]},{36:[1,170]},{21:171,28:$Vf,36:$Vg,45:50,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,56:$Vn,66:$Vo},{19:$Vb,20:$Vc,29:$Vd,37:[1,172]},{16:[1,173]},o($VK,[2,48]),{19:[1,174],35:$Vq,36:$Vr,46:$Vs,54:$Vt,55:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD},o($Vp,[2,18]),{23:[1,175]},{19:[1,176],35:$Vq,36:$Vr,46:$Vs,54:$Vt,55:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD},{19:[1,177],35:$Vq,36:$Vr,46:$Vs,54:$Vt,55:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD},o([19,28,29,31,34,38,46,47],[2,52],{35:$Vq,36:$Vr,54:$Vt,55:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD}),o($Vp,[2,31]),o($Vp,[2,33]),{21:178,28:$Vf,36:$Vg,45:50,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,56:$Vn,66:$Vo},o($Vp,[2,37]),{21:179,28:$Vf,36:$Vg,45:50,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,56:$Vn,66:$Vo},{34:[1,180],35:$Vq,36:$Vr,46:$Vs,54:$Vt,55:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD},{19:[1,181],31:[1,182],35:$Vq,36:$Vr,46:$Vs,54:$Vt,55:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD},{19:[1,183]},{19:[1,184]},{35:$Vq,36:$Vr,38:[1,185],46:$Vs,54:$Vt,55:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD},{38:[1,186]},o($V8,[2,47]),o($Vp,[2,30]),{24:[1,187]},o($Vp,[2,36]),o($Vp,[2,32]),{19:[1,188],35:$Vq,36:$Vr,46:$Vs,54:$Vt,55:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD},{35:$Vq,36:$Vr,38:[1,189],46:$Vs,54:$Vt,55:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD},o($VE,[2,64]),{16:[2,28]},{32:[1,190]},{16:[2,38]},{16:[2,39]},{20:[1,191]},{20:[1,192],37:[1,193]},{34:[1,194]},o($Vp,[2,35]),o($VE,[2,78]),{19:[1,195]},{21:196,28:$Vf,36:$Vg,45:50,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,56:$Vn,66:$Vo},{39:[1,197]},{38:[1,198]},{21:199,28:$Vf,36:$Vg,45:50,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,56:$Vn,66:$Vo},{16:[2,29]},{19:[1,200],35:$Vq,36:$Vr,46:$Vs,54:$Vt,55:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD},{17:[1,201]},{20:[1,202]},{19:[1,203],35:$Vq,36:$Vr,46:$Vs,54:$Vt,55:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD},{16:[2,43]},{37:[1,204]},{39:[1,205]},o($Vp,[2,34]),{21:207,28:$Vf,36:$Vg,40:206,45:50,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,56:$Vn,66:$Vo},{17:[1,208]},{29:$VN,38:[1,209]},o($VO,[2,45],{35:$Vq,36:$Vr,46:$Vs,54:$Vt,55:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD}),{37:[1,211]},{19:[1,212]},{21:213,28:$Vf,36:$Vg,45:50,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,56:$Vn,66:$Vo},{21:207,28:$Vf,36:$Vg,37:[1,215],40:214,45:50,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,56:$Vn,66:$Vo},{16:[2,40]},o($VO,[2,44],{35:$Vq,36:$Vr,46:$Vs,54:$Vt,55:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD}),{29:$VN,38:[1,216]},{21:207,28:$Vf,36:$Vg,40:217,45:50,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,56:$Vn,66:$Vo},{37:[1,218]},{29:$VN,38:[1,219]},{21:207,28:$Vf,36:$Vg,40:220,45:50,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,56:$Vn,66:$Vo},{38:[1,221]},{29:$VN,38:[1,222]},{37:[1,223]},{19:[1,224]},{37:[1,225]},{16:[2,41]},{21:207,28:$Vf,36:$Vg,40:226,45:50,48:$Vh,49:$Vi,50:$Vj,51:$Vk,52:$Vl,53:$Vm,56:$Vn,66:$Vo},{29:$VN,38:[1,227]},{38:[1,228]},{19:[1,229]},{16:[2,42]}],
defaultActions: {16:[2,1],123:[2,50],124:[2,9],125:[2,10],126:[2,11],127:[2,12],128:[2,13],148:[2,14],181:[2,28],183:[2,38],184:[2,39],195:[2,29],200:[2,43],212:[2,40],224:[2,41],229:[2,42]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    var cadena="";
    var listaDeErrores=[];
    const Error = require("../Interprete/instruccion/Errores.js");

    //Dato Asociado
    const {TipoDato} = require("../Interprete/Expresion.js");

    //Expresion:
    const Dato = require("../Interprete/exprecion/Dato.js");
    const Aritmetica = require("../Interprete/exprecion/Aritmeticas.js");
    const Ternario = require("../Interprete/exprecion/Ternarios.js");
    const Negativo = require("../Interprete/exprecion/Negativo.js");
    const Casteo = require("../Interprete/exprecion/Casteos.js");
    const Incre_Decre = require("../Interprete/exprecion/Incre_Decre.js")
    const LlamadaMetodo = require ("../Interprete/exprecion/LlamadaMetodo.js");

    //Instruccion:
    const Print = require("../Interprete/instruccion/Print.js");
    const Declarar = require("../Interprete/instruccion/Declarar.js");
    const Vectores = require("../Interprete/instruccion/Vectores.js")
    const AccesoVector = require("../Interprete/instruccion/AccesoVector.js");
    const ReasignarVector = require("../Interprete/instruccion/ReasignarVector.js");
    const MetodSinParame = require("../Interprete/instruccion/MetodSinParame.js")
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// comentario de linea
break;
case 1:// comentario multiples lineas
break;
case 2: return 30; 
break;
case 3: return 32; 
break;
case 4: return 56; 
break;
case 5: return 22; 
break;
case 6: return 39; 
break;
case 7: return 41; 
break;
case 8: return 51; 
break;
case 9: return 52; 
break;
case 10: return 17; 
break;
case 11: return 22; 
break;
case 12: return 24; 
break;
case 13: return 25; 
break;
case 14: return 26; 
break;
case 15: return 27; 
break;
case 16: return 59; 
break;
case 17: return 58; 
break;
case 18: return 20; 
break;
case 19: return 60; 
break;
case 20: return 31; 
break;
case 21: return 61; 
break;
case 22: return 62; 
break;
case 23: return 63; 
break;
case 24: return 64; 
break;
case 25: return 65; 
break;
case 26: return 66; 
break;
case 27: return 23; 
break;
case 28: return 47; 
break;
case 29: return 19; 
break;
case 30: return 29; 
break;
case 31: return 33; 
break;
case 32: return 34; 
break;
case 33: return 35; 
break;
case 34: return 36; 
break;
case 35: return 54; 
break;
case 36: return 55; 
break;
case 37: return 57; 
break;
case 38: return 46; 
break;
case 39: return 37; 
break;
case 40: return 38; 
break;
case 41: return 42; 
break;
case 42: return 16; 
break;
case 43: return 49; 
break;
case 44: return 48; 
break;
case 45: return 28; 
break;
case 46: cadena=""; this.begin("string"); 
break;
case 47: cadena+=yy_.yytext; 
break;
case 48: cadena+="\""; 
break;
case 49: cadena+="\n"; 
break;
case 50: cadena+=" ";  
break;
case 51: cadena+="\t"; 
break;
case 52: cadena+="\\"; 
break;
case 53: cadena+="\'"; 
break;
case 54: yy_.yytext=cadena; this.popState(); return 53; 
break;
case 55: return 50 
break;
case 56:/* Espacios se ignoran */
break;
case 57:return 5;
break;
case 58: var nuevo_error = new Error("Error Léxico","Caracter Incorrecto: "+yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); listaDeErrores.push(nuevo_error); 
    console.error('Error léxico: \"' + yy_.yytext + '\", linea: ' + yy_.yylloc.first_line + ', columna: ' + yy_.yylloc.first_column);
    return 'INVALIDO' 
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:pow\b)/i,/^(?:std\b)/i,/^(?:new\b)/i,/^(?:void\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:int\b)/i,/^(?:std\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:bool\b)/i,/^(?:double\b)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:=)/i,/^(?:<=)/i,/^(?:<<)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:::)/i,/^(?::)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\?)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:(([0-9]+[.][0-9]+)))/i,/^(?:([0-9]+))/i,/^(?:([a-zA-Z][a-zA-Z0-9_]*))/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\s)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:["])/i,/^(?:["\'"]([^"\'"])?["\'"])/i,/^(?:[ \s\r\n\t])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[47,48,49,50,51,52,53,54],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,55,56,57,58],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}