/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,16],$V2=[1,10],$V3=[1,13],$V4=[1,12],$V5=[1,14],$V6=[1,11],$V7=[1,15],$V8=[1,9],$V9=[2,5,13,20,24,27,28,29,30,43],$Va=[1,31],$Vb=[11,22,31],$Vc=[2,31],$Vd=[1,36],$Ve=[1,37],$Vf=[1,38],$Vg=[1,40],$Vh=[1,41],$Vi=[1,43],$Vj=[1,44],$Vk=[1,47],$Vl=[1,48],$Vm=[1,56],$Vn=[1,59],$Vo=[1,51],$Vp=[1,52],$Vq=[1,53],$Vr=[1,54],$Vs=[1,55],$Vt=[1,57],$Vu=[1,58],$Vv=[1,61],$Vw=[1,64],$Vx=[1,69],$Vy=[1,72],$Vz=[1,71],$VA=[1,73],$VB=[1,70],$VC=[1,68],$VD=[2,5,12,13,20,24,27,28,29,30,32,43,48,49,50],$VE=[1,93],$VF=[1,94],$VG=[1,106],$VH=[1,95],$VI=[1,96],$VJ=[1,97],$VK=[1,98],$VL=[1,99],$VM=[1,100],$VN=[1,101],$VO=[1,102],$VP=[1,103],$VQ=[1,104],$VR=[1,105],$VS=[11,31,33,36,37,38,40,52,53,60,61,63,64,65,66,67,68,69,70,71],$VT=[1,120],$VU=[11,22,31,39],$VV=[1,136],$VW=[1,137],$VX=[11,31,33,36,40,52,53,70,71],$VY=[2,11,12,20,24,27,28,29,30,31,32,33,36,37,38,40,48,49,50,52,53,60,61,63,64,65,66,67,68,69,70,71],$VZ=[1,162],$V_=[31,36,40],$V$=[1,172],$V01=[1,175],$V11=[1,179],$V21=[1,178],$V31=[1,177],$V41=[1,176],$V51=[1,174],$V61=[1,173],$V71=[1,180],$V81=[1,181],$V91=[1,182],$Va1=[31,36],$Vb1=[11,31,33,36,37,38,40,52,53,64,65,66,67,68,69,70,71],$Vc1=[11,31,33,36,40,52,53,64,65,66,67,68,69,70,71],$Vd1=[2,12,20,24,27,28,29,30,32,48,49,50],$Ve1=[1,217];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"lista_instrucciones":4,"EOF":5,"instruccion":6,"delcarar_metodo":7,"variables":8,"casteos":9,"execute":10,"PUNTOYCOMA":11,"LLAVE_C":12,"EXECUTE":13,"llamada_metodo":14,"cuerpo":15,"print":16,"incre_decre":17,"declarar_vector":18,"sentencias_contro":19,"INT":20,"rep_iden":21,"IGUAL":22,"expresion":23,"STD":24,"DOBLEDOSPUNTOS":25,"STRING":26,"CHAR":27,"BOOL":28,"DOUBLE":29,"ID":30,"COMA":31,"COUT":32,"DOBLEMENOR":33,"ENDL":34,"PARENTESIS_A":35,"PARENTESIS_C":36,"MAS":37,"MENOS":38,"CORCHETE_A":39,"CORCHETE_C":40,"NEW":41,"lista_valores":42,"VOID":43,"LLAVE_A":44,"instrucciones_metodo":45,"parametros":46,"tipo":47,"BREAK":48,"RETURN":49,"CONTINUE":50,"ternario":51,"INTEROGACION":52,"DOSPUNTOS":53,"ENTERO":54,"NUMERODECIMA":55,"CARACTER":56,"TRUE":57,"FALSE":58,"TEXTO":59,"MULTI":60,"DIVICION":61,"POW":62,"MODULO":63,"DOBLEIGUAL":64,"DIFERENCIACION":65,"MENORIGUAL":66,"MENOR":67,"MAYORIGUAL":68,"MAYOR":69,"OR":70,"AND":71,"NOT":72,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"PUNTOYCOMA",12:"LLAVE_C",13:"EXECUTE",20:"INT",22:"IGUAL",24:"STD",25:"DOBLEDOSPUNTOS",26:"STRING",27:"CHAR",28:"BOOL",29:"DOUBLE",30:"ID",31:"COMA",32:"COUT",33:"DOBLEMENOR",34:"ENDL",35:"PARENTESIS_A",36:"PARENTESIS_C",37:"MAS",38:"MENOS",39:"CORCHETE_A",40:"CORCHETE_C",41:"NEW",43:"VOID",44:"LLAVE_A",48:"BREAK",49:"RETURN",50:"CONTINUE",52:"INTEROGACION",53:"DOSPUNTOS",54:"ENTERO",55:"NUMERODECIMA",56:"CARACTER",57:"TRUE",58:"FALSE",59:"TEXTO",60:"MULTI",61:"DIVICION",62:"POW",63:"MODULO",64:"DOBLEIGUAL",65:"DIFERENCIACION",66:"MENORIGUAL",67:"MENOR",68:"MAYORIGUAL",69:"MAYOR",70:"OR",71:"AND",72:"NOT"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[10,3],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,2],[8,3],[8,5],[8,5],[8,7],[8,3],[8,5],[8,3],[8,5],[8,3],[8,5],[8,4],[21,3],[21,1],[16,4],[16,6],[9,8],[9,7],[9,8],[9,7],[9,12],[9,9],[9,8],[9,7],[17,4],[17,4],[18,11],[18,9],[18,16],[18,17],[18,11],[18,9],[18,16],[18,17],[18,11],[18,9],[18,16],[18,17],[18,11],[18,9],[18,16],[18,17],[18,15],[18,11],[18,20],[18,19],[18,7],[42,3],[42,1],[7,7],[7,8],[7,8],[7,7],[7,8],[7,7],[7,8],[7,7],[7,10],[7,9],[7,8],[7,7],[46,4],[46,2],[47,1],[47,1],[47,1],[47,1],[47,3],[47,1],[45,2],[45,1],[14,3],[14,4],[19,2],[19,3],[19,2],[19,2],[51,5],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,3],[23,3],[23,3],[23,3],[23,6],[23,3],[23,2],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,1],[23,3],[23,3],[23,2],[23,4],[23,7],[23,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 var final={'Errores': listaDeErrores, 'Resultado': $$[$0-1]}; listaDeErrores=[]; return final; 
break;
case 2:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3:
 this.$ = []; this.$.push($$[$0]); 
break;
case 4: case 5: case 6: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 122:
 this.$ = $$[$0] 
break;
case 7:
this.$ = $$[$0]
break;
case 8: case 9:
this.$ = ""; var nuevo_error = new Error("Error Sint치ctico","Recuperado con: "+yytext, this._$.first_line, this._$.first_column); listaDeErrores.push(nuevo_error);
                            console.error('Error sint치ctico: ' + yytext + ',  linea: ' + this._$.first_line + ', columna: ' + this._$.first_column);
break;
case 10:
 this.$ = new Execute($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 18:
this.$ = []; var nuevo_error = new Error("Error Sint치ctico","Recuperado con: "+yytext, this._$.first_line, this._$.first_column); listaDeErrores.push(nuevo_error);
                            console.error('Error sint치ctico: ' + yytext + ',  linea: ' + this._$.first_line + ', columna: ' + this._$.first_column);
break;
case 19:
 this.$ = new Declarar($$[$0-1], TipoDato.INT, "ERROR_1", _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 20:
 this.$ = new Declarar($$[$0-3], TipoDato.INT, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 21:
 this.$ = new Declarar($$[$0-1], TipoDato.CADENA, "ERROR_2", _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 22:
 this.$ = new Declarar($$[$0-3], TipoDato.CADENA, $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 23:
 this.$ = new Declarar($$[$0-1], TipoDato.CHAR, "ERROR_3", _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 24:
 this.$ = new Declarar($$[$0-3], TipoDato.CHAR, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 25:
 this.$ = new Declarar($$[$0-1], TipoDato.BOOLEAN, "ERROR_4", _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 26:
 this.$ = new Declarar($$[$0-3], TipoDato.BOOLEAN, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 27:
 this.$ = new Declarar($$[$0-1], TipoDato.DOUBLE, "ERROR_5", _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 28:
 this.$ = new Declarar($$[$0-3], TipoDato.DOUBLE, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 29:
 this.$ = new Declarar($$[$0-3], $$[$0-1], "RENOMBRAR", _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 30:
 this.$ = $$[$0-2] ; this.$.push(new Dato($$[$0], TipoDato.ID, _$[$0-2].first_line, _$[$0-2].first_column)); 
break;
case 31:
 this.$ = [] ;  this.$.push(new Dato($$[$0], TipoDato.ID, _$[$0].first_line, _$[$0].first_column)); 
break;
case 32:
 this.$ = new Print($$[$0-1], null, _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 33:
 this.$ = new Print($$[$0-3], TipoDato.ENDL, _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 34:
 this.$ = new Casteo($$[$0-6], TipoDato.INT, $$[$0-1], "SI", _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 35:
 this.$ = new Casteo($$[$0-6], TipoDato.INT, $$[$0-1], "NO", _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 36:
 this.$ = new Casteo($$[$0-6], TipoDato.DOUBLE, $$[$0-1], "SI", _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 37:
 this.$ = new Casteo($$[$0-6], TipoDato.DOUBLE, $$[$0-1], "NO", _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 38:
 this.$ = new Casteo($$[$0-8], TipoDato.CADENA, $$[$0-1], "SI", _$[$0-11].first_line, _$[$0-11].first_column); 
break;
case 39:
 this.$ = new Casteo($$[$0-8], TipoDato.CADENA, $$[$0-1], "NO", _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 40:
 this.$ = new Casteo($$[$0-6], TipoDato.CHAR, $$[$0-1], "SI", _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 41:
 this.$ = new Casteo($$[$0-6], TipoDato.CHAR, $$[$0-1], "NO", _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 42:
 this.$ = new Incre_Decre($$[$0-3], "++", _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 43:
 this.$ = new Incre_Decre($$[$0-3], "--", _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 44:
 this.$ = new Vectores($$[$0-9], TipoDato.INT, $$[$0-2], _$[$0-10].first_line, _$[$0-10].first_column); 
break;
case 45:
 this.$ = new Vectores($$[$0-7], TipoDato.INT, $$[$0-2], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 46: case 47: case 50: case 51: case 54: case 55: case 58: case 59: case 62: case 63:
  
break;
case 48:
 this.$ = new Vectores($$[$0-9], TipoDato.DOUBLE, $$[$0-2], _$[$0-10].first_line, _$[$0-10].first_column); 
break;
case 49:
 this.$ = new Vectores($$[$0-7], TipoDato.DOUBLE, $$[$0-2], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 52:
 this.$ = new Vectores($$[$0-9], TipoDato.BOOLEAN, $$[$0-2], _$[$0-10].first_line, _$[$0-10].first_column); 
break;
case 53:
 this.$ = new Vectores($$[$0-7], TipoDato.BOOLEAN, $$[$0-2], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 56:
 this.$ = new Vectores($$[$0-9], TipoDato.CHAR, $$[$0-2], _$[$0-10].first_line, _$[$0-10].first_column); 
break;
case 57:
 this.$ = new Vectores($$[$0-7], TipoDato.CHAR, $$[$0-2], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 60:
 this.$ = new Vectores($$[$0-11], TipoDato.CADENA, $$[$0-2], _$[$0-14].first_line, _$[$0-14].first_column); 
break;
case 61:
 this.$ = new Vectores($$[$0-7], TipoDato.CADENA, $$[$0-2], _$[$0-10].first_line, _$[$0-10].first_column); 
break;
case 64:
 this.$ = new ReasignarVector($$[$0-6], $$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 65:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 66: case 88:
this.$ = [$$[$0]];
break;
case 67:
 this.$ = new DecFuncion($$[$0-5], null, null, $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 68:
 this.$ = new DecFuncion($$[$0-6], null, $$[$0-4], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 69:
 this.$ = new DecFuncion($$[$0-6], TipoDato.INT, $$[$0-4], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 70:
 this.$ = new DecFuncion($$[$0-5], TipoDato.INT, null, $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 71:
 this.$ = new DecFuncion($$[$0-6], TipoDato.DOUBLE, $$[$0-4], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 72:
 this.$ = new DecFuncion($$[$0-5], TipoDato.DOUBLE, null, $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 73:
 this.$ = new DecFuncion($$[$0-6], TipoDato.CHAR, $$[$0-4], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 74:
 this.$ = new DecFuncion($$[$0-5], TipoDato.CHAR, null, $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 75:
 this.$ = new DecFuncion($$[$0-6], TipoDato.CADENA, $$[$0-4], $$[$0-1], _$[$0-9].first_line, _$[$0-9].first_column); 
break;
case 76:
 this.$ = new DecFuncion($$[$0-5], TipoDato.CADENA, null, $$[$0-1], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 77:
 this.$ = new DecFuncion($$[$0-6], TipoDato.BOOLEAN, $$[$0-4], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 78:
 this.$ = new DecFuncion($$[$0-5], TipoDato.BOOLEAN, null, $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 79:
 this.$ = $$[$0-3] ; this.$.push(new Dato($$[$0], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)); 
break;
case 80:
 this.$ = [] ;  this.$.push(new Dato($$[$0], $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column)); 
break;
case 81:
 this.$ = TipoDato.VOID; 
break;
case 82:
 this.$ = TipoDato.INT; 
break;
case 83:
 this.$ = TipoDato.DOUBLE; 
break;
case 84:
 this.$ = TipoDato.CHAR; 
break;
case 85:
 this.$ = TipoDato.CADENA; 
break;
case 86:
 this.$ = TipoDato.BOOLEAN; 
break;
case 87:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 89:
 this.$ = new CallFuncion($$[$0-2], null, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 90:
 this.$ = new CallFuncion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 91:
 this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 92:
 this.$ = new Return($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 93:
 this.$ = new Return(null, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 94:
 this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 95:
 this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 96:
 this.$ = new Dato($$[$0], TipoDato.INT, _$[$0].first_line, _$[$0].first_column); 
break;
case 97:
 this.$ = new Dato($$[$0], TipoDato.DOUBLE, _$[$0].first_line, _$[$0].first_column); 
break;
case 98:
 this.$ = new Dato($$[$0].replace(/^'|'$/g, ''), TipoDato.CHAR, _$[$0].first_line, _$[$0].first_column); 
break;
case 99: case 100:
 this.$ = new Dato($$[$0], TipoDato.BOOLEAN, _$[$0].first_line, _$[$0].first_column); 
break;
case 101:
 this.$ = new Dato($$[$0], TipoDato.ID, _$[$0].first_line, _$[$0].first_column); 
break;
case 102:
 this.$ = new Dato($$[$0], TipoDato.CADENA, _$[$0].first_line, _$[$0].first_column); 
break;
case 103: case 104: case 105: case 106: case 108: case 110: case 111: case 112: case 113: case 114: case 115: case 117: case 118:
 this.$ = new Aritmetica($$[$0-2] ,$$[$0-1] ,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 107:
 this.$ = new Aritmetica($$[$0-3] ,"pow" ,$$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 109:
 this.$ = new Negativo($$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 116:
this.$ = $$[$0];
break;
case 119:
 this.$ = new Aritmetica($$[$0] ,$$[$0-1] ,$$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 120:
 this.$ = new AccesoVector($$[$0-3], $$[$0-1], "null", _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 121:
 this.$ = new AccesoVector($$[$0-6], $$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,13:$V1,20:$V2,24:$V3,27:$V4,28:$V5,29:$V6,30:$V7,43:$V8},{1:[3]},{2:$V0,5:[1,17],6:18,7:4,8:5,9:6,10:7,13:$V1,20:$V2,24:$V3,27:$V4,28:$V5,29:$V6,30:$V7,43:$V8},o($V9,[2,3]),o($V9,[2,4]),o($V9,[2,5]),o($V9,[2,6]),o($V9,[2,7]),{11:[1,19],12:[1,20]},{30:[1,21]},{21:23,30:[1,22]},{21:25,30:[1,24]},{21:27,30:[1,26]},{25:[1,28]},{21:30,30:[1,29]},{22:$Va},{14:32,30:[1,33]},{1:[2,1]},o($V9,[2,2]),o($V9,[2,8]),o($V9,[2,9]),{35:[1,34]},o($Vb,$Vc,{35:[1,35]}),{11:$Vd,22:$Ve,31:$Vf},o($Vb,$Vc,{35:[1,39]}),{11:$Vg,22:$Vh,31:$Vf},o($Vb,$Vc,{35:[1,42]}),{11:$Vi,22:$Vj,31:$Vf},{26:[1,45]},o($Vb,$Vc,{35:[1,46]}),{11:$Vk,22:$Vl,31:$Vf},{14:62,23:49,30:$Vm,35:[1,50],38:$Vn,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{11:[1,63]},{35:$Vw},{20:$Vx,24:$Vy,27:$Vz,28:$VA,29:$VB,36:[1,65],43:$VC,46:66,47:67},{20:$Vx,24:$Vy,27:$Vz,28:$VA,29:$VB,36:[1,75],43:$VC,46:74,47:67},o($VD,[2,19]),{14:62,23:76,30:$Vm,35:[1,77],38:$Vn,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{30:[1,78]},{20:$Vx,24:$Vy,27:$Vz,28:$VA,29:$VB,36:[1,80],43:$VC,46:79,47:67},o($VD,[2,27]),{14:62,23:81,30:$Vm,35:[1,82],38:$Vn,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{20:$Vx,24:$Vy,27:$Vz,28:$VA,29:$VB,36:[1,84],43:$VC,46:83,47:67},o($VD,[2,23]),{14:62,23:85,30:$Vm,35:[1,86],38:$Vn,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{21:88,30:[1,87]},{20:$Vx,24:$Vy,27:$Vz,28:$VA,29:$VB,36:[1,90],43:$VC,46:89,47:67},o($VD,[2,25]),{14:62,23:91,30:$Vm,38:$Vn,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{11:[1,92],37:$VE,38:$VF,52:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR},{20:[1,107],24:[1,109],27:[1,110],29:[1,108]},o($VS,[2,96]),o($VS,[2,97]),o($VS,[2,98]),o($VS,[2,99]),o($VS,[2,100]),o($VS,[2,101],{35:$Vw,39:[1,111]}),o($VS,[2,102]),{35:[1,112]},{14:62,23:113,30:$Vm,38:$Vn,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},o($VS,[2,116]),{14:62,23:114,30:$Vm,38:$Vn,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},o($VS,[2,122]),o($V9,[2,10]),{14:62,23:117,30:$Vm,36:[1,115],38:$Vn,42:116,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{44:[1,118]},{31:$VT,36:[1,119]},{30:[1,121]},{30:[2,81]},{30:[2,82]},{30:[2,83]},{30:[2,84]},{25:[1,122]},{30:[2,86]},{31:$VT,36:[1,123]},{44:[1,124]},{11:[1,125],37:$VE,38:$VF,52:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR},{20:[1,126]},o($VU,[2,30]),{31:$VT,36:[1,127]},{44:[1,128]},{11:[1,129],37:$VE,38:$VF,52:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR},{29:[1,130]},{31:$VT,36:[1,131]},{44:[1,132]},{11:[1,133],37:$VE,38:$VF,52:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR},{27:[1,134]},o($Vb,$Vc,{35:[1,135]}),{11:$VV,22:$VW,31:$Vf},{31:$VT,36:[1,138]},{44:[1,139]},{11:[1,140],37:$VE,38:$VF,52:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR},o($VD,[2,29]),{14:62,23:141,30:$Vm,38:$Vn,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{14:62,23:142,30:$Vm,38:$Vn,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{14:62,23:143,30:$Vm,38:$Vn,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{14:62,23:144,30:$Vm,38:$Vn,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{14:62,23:145,30:$Vm,38:$Vn,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{14:62,23:146,30:$Vm,38:$Vn,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{14:62,23:147,30:$Vm,38:$Vn,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{14:62,23:148,30:$Vm,38:$Vn,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{14:62,23:149,30:$Vm,38:$Vn,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{14:62,23:150,30:$Vm,38:$Vn,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{14:62,23:151,30:$Vm,38:$Vn,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{14:62,23:152,30:$Vm,38:$Vn,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{14:62,23:153,30:$Vm,38:$Vn,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{14:62,23:154,30:$Vm,38:$Vn,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{36:[1,155]},{36:[1,156]},{25:[1,157]},{36:[1,158]},{14:62,23:159,30:$Vm,38:$Vn,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{14:62,23:160,30:$Vm,38:$Vn,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},o($VS,[2,109]),o($VX,[2,119],{37:$VE,38:$VF,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP}),o($VY,[2,89]),{31:$VZ,36:[1,161]},o($V_,[2,66],{37:$VE,38:$VF,52:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR}),{2:$V$,8:169,9:170,14:166,15:164,16:165,17:167,18:168,19:171,20:$V01,24:$V11,27:$V21,28:$V31,29:$V41,30:$V51,32:$V61,45:163,48:$V71,49:$V81,50:$V91},{44:[1,183]},{20:$Vx,24:$Vy,27:$Vz,28:$VA,29:$VB,43:$VC,47:184},o($Va1,[2,80]),{26:[1,185]},{44:[1,186]},{2:$V$,8:169,9:170,14:166,15:164,16:165,17:167,18:168,19:171,20:$V01,24:$V11,27:$V21,28:$V31,29:$V41,30:$V51,32:$V61,45:187,48:$V71,49:$V81,50:$V91},o($VD,[2,20]),{36:[1,188]},{44:[1,189]},{2:$V$,8:169,9:170,14:166,15:164,16:165,17:167,18:168,19:171,20:$V01,24:$V11,27:$V21,28:$V31,29:$V41,30:$V51,32:$V61,45:190,48:$V71,49:$V81,50:$V91},o($VD,[2,28]),{36:[1,191]},{44:[1,192]},{2:$V$,8:169,9:170,14:166,15:164,16:165,17:167,18:168,19:171,20:$V01,24:$V11,27:$V21,28:$V31,29:$V41,30:$V51,32:$V61,45:193,48:$V71,49:$V81,50:$V91},o($VD,[2,24]),{36:[1,194]},{20:$Vx,24:$Vy,27:$Vz,28:$VA,29:$VB,36:[1,196],43:$VC,46:195,47:67},o($VD,[2,21]),{14:62,23:197,30:$Vm,35:[1,198],38:$Vn,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{44:[1,199]},{2:$V$,8:169,9:170,14:166,15:164,16:165,17:167,18:168,19:171,20:$V01,24:$V11,27:$V21,28:$V31,29:$V41,30:$V51,32:$V61,45:200,48:$V71,49:$V81,50:$V91},o($VD,[2,26]),o($Vb1,[2,103],{60:$VH,61:$VI,63:$VJ}),o($Vb1,[2,104],{60:$VH,61:$VI,63:$VJ}),o($VS,[2,105]),o($VS,[2,106]),o($VS,[2,108]),o($Vc1,[2,110],{37:$VE,38:$VF,60:$VH,61:$VI,63:$VJ}),o($Vc1,[2,111],{37:$VE,38:$VF,60:$VH,61:$VI,63:$VJ}),o($Vc1,[2,112],{37:$VE,38:$VF,60:$VH,61:$VI,63:$VJ}),o($Vc1,[2,113],{37:$VE,38:$VF,60:$VH,61:$VI,63:$VJ}),o($Vc1,[2,114],{37:$VE,38:$VF,60:$VH,61:$VI,63:$VJ}),o($Vc1,[2,115],{37:$VE,38:$VF,60:$VH,61:$VI,63:$VJ}),o([11,31,33,36,40,52,53,70],[2,117],{37:$VE,38:$VF,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,71:$VR}),o($VX,[2,118],{37:$VE,38:$VF,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP}),{37:$VE,38:$VF,52:$VG,53:[1,201],60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR},{14:62,23:202,30:$Vm,38:$Vn,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{14:62,23:203,30:$Vm,38:$Vn,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{26:[1,204]},{14:62,23:205,30:$Vm,38:$Vn,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{37:$VE,38:$VF,40:[1,206],52:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR},{31:[1,207],37:$VE,38:$VF,52:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR},o($VY,[2,90]),{14:62,23:208,30:$Vm,38:$Vn,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{2:$V$,8:169,9:170,12:[1,209],14:166,15:210,16:165,17:167,18:168,19:171,20:$V01,24:$V11,27:$V21,28:$V31,29:$V41,30:$V51,32:$V61,48:$V71,49:$V81,50:$V91},o($Vd1,[2,88]),o($Vd1,[2,11]),o($Vd1,[2,12]),o($Vd1,[2,13]),o($Vd1,[2,14]),o($Vd1,[2,15]),o($Vd1,[2,16]),o($Vd1,[2,17]),{11:[1,211]},{33:[1,212]},{22:$Va,35:$Vw,37:[1,213],38:[1,214],39:[1,215]},{21:216,30:$Ve1},{21:218,30:$Ve1},{21:219,30:$Ve1},{21:220,30:$Ve1},{25:[1,221]},{11:[1,222]},{11:[1,224],14:62,23:223,30:$Vm,38:$Vn,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{11:[1,225]},{2:$V$,8:169,9:170,14:166,15:164,16:165,17:167,18:168,19:171,20:$V01,24:$V11,27:$V21,28:$V31,29:$V41,30:$V51,32:$V61,45:226,48:$V71,49:$V81,50:$V91},{30:[1,227]},{30:[2,85]},{2:$V$,8:169,9:170,14:166,15:164,16:165,17:167,18:168,19:171,20:$V01,24:$V11,27:$V21,28:$V31,29:$V41,30:$V51,32:$V61,45:228,48:$V71,49:$V81,50:$V91},{2:$V$,8:169,9:170,12:[1,229],14:166,15:210,16:165,17:167,18:168,19:171,20:$V01,24:$V11,27:$V21,28:$V31,29:$V41,30:$V51,32:$V61,48:$V71,49:$V81,50:$V91},{14:62,23:230,30:$Vm,38:$Vn,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{2:$V$,8:169,9:170,14:166,15:164,16:165,17:167,18:168,19:171,20:$V01,24:$V11,27:$V21,28:$V31,29:$V41,30:$V51,32:$V61,45:231,48:$V71,49:$V81,50:$V91},{2:$V$,8:169,9:170,12:[1,232],14:166,15:210,16:165,17:167,18:168,19:171,20:$V01,24:$V11,27:$V21,28:$V31,29:$V41,30:$V51,32:$V61,48:$V71,49:$V81,50:$V91},{14:62,23:233,30:$Vm,38:$Vn,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{2:$V$,8:169,9:170,14:166,15:164,16:165,17:167,18:168,19:171,20:$V01,24:$V11,27:$V21,28:$V31,29:$V41,30:$V51,32:$V61,45:234,48:$V71,49:$V81,50:$V91},{2:$V$,8:169,9:170,12:[1,235],14:166,15:210,16:165,17:167,18:168,19:171,20:$V01,24:$V11,27:$V21,28:$V31,29:$V41,30:$V51,32:$V61,48:$V71,49:$V81,50:$V91},{14:62,23:236,30:$Vm,38:$Vn,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{31:$VT,36:[1,237]},{44:[1,238]},{11:[1,239],37:$VE,38:$VF,52:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR},{24:[1,240]},{2:$V$,8:169,9:170,14:166,15:164,16:165,17:167,18:168,19:171,20:$V01,24:$V11,27:$V21,28:$V31,29:$V41,30:$V51,32:$V61,45:241,48:$V71,49:$V81,50:$V91},{2:$V$,8:169,9:170,12:[1,242],14:166,15:210,16:165,17:167,18:168,19:171,20:$V01,24:$V11,27:$V21,28:$V31,29:$V41,30:$V51,32:$V61,48:$V71,49:$V81,50:$V91},{14:62,23:243,30:$Vm,38:$Vn,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{11:[1,244],37:$VE,38:$VF,52:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR},{11:[1,245],37:$VE,38:$VF,52:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR},{36:[1,246]},{11:[1,247],37:$VE,38:$VF,52:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR},o($VS,[2,120],{39:[1,248]}),{14:62,23:249,30:$Vm,38:$Vn,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},o($V_,[2,65],{37:$VE,38:$VF,52:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR}),o($V9,[2,67]),o($Vd1,[2,87]),o($Vd1,[2,18]),{14:62,23:250,30:$Vm,38:$Vn,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{37:[1,251]},{38:[1,252]},{14:62,23:253,30:$Vm,38:$Vn,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{11:$Vd,22:$Ve,31:$Vf,39:[1,254]},o($VU,$Vc),{11:$Vg,22:$Vh,31:$Vf,39:[1,255]},{11:$Vk,22:$Vl,31:$Vf,39:[1,256]},{11:$Vi,22:$Vj,31:$Vf,39:[1,257]},{26:[1,258]},o($Vd1,[2,91]),{11:[1,259],37:$VE,38:$VF,52:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR},o($Vd1,[2,93]),o($Vd1,[2,94]),{2:$V$,8:169,9:170,12:[1,260],14:166,15:210,16:165,17:167,18:168,19:171,20:$V01,24:$V11,27:$V21,28:$V31,29:$V41,30:$V51,32:$V61,48:$V71,49:$V81,50:$V91},o($Va1,[2,79]),{2:$V$,8:169,9:170,12:[1,261],14:166,15:210,16:165,17:167,18:168,19:171,20:$V01,24:$V11,27:$V21,28:$V31,29:$V41,30:$V51,32:$V61,48:$V71,49:$V81,50:$V91},o($V9,[2,70]),{11:[1,262],37:$VE,38:$VF,52:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR},{2:$V$,8:169,9:170,12:[1,263],14:166,15:210,16:165,17:167,18:168,19:171,20:$V01,24:$V11,27:$V21,28:$V31,29:$V41,30:$V51,32:$V61,48:$V71,49:$V81,50:$V91},o($V9,[2,72]),{11:[1,264],37:$VE,38:$VF,52:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR},{2:$V$,8:169,9:170,12:[1,265],14:166,15:210,16:165,17:167,18:168,19:171,20:$V01,24:$V11,27:$V21,28:$V31,29:$V41,30:$V51,32:$V61,48:$V71,49:$V81,50:$V91},o($V9,[2,74]),{11:[1,266],37:$VE,38:$VF,52:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR},{44:[1,267]},{2:$V$,8:169,9:170,14:166,15:164,16:165,17:167,18:168,19:171,20:$V01,24:$V11,27:$V21,28:$V31,29:$V41,30:$V51,32:$V61,45:268,48:$V71,49:$V81,50:$V91},o($VD,[2,22]),{25:[1,269]},{2:$V$,8:169,9:170,12:[1,270],14:166,15:210,16:165,17:167,18:168,19:171,20:$V01,24:$V11,27:$V21,28:$V31,29:$V41,30:$V51,32:$V61,48:$V71,49:$V81,50:$V91},o($V9,[2,78]),o([11,31,33,36,40,52,53],[2,95],{37:$VE,38:$VF,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR}),o($VD,[2,35]),o($VD,[2,37]),{14:62,23:271,30:$Vm,38:$Vn,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},o($VD,[2,41]),{14:62,23:272,30:$Vm,38:$Vn,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{36:[1,273],37:$VE,38:$VF,52:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR},{11:[1,274],33:[1,275],37:$VE,38:$VF,52:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR},{11:[1,276]},{11:[1,277]},{37:$VE,38:$VF,40:[1,278],52:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR},{40:[1,279]},{40:[1,280]},{40:[1,281]},{40:[1,282]},{21:283,30:$Ve1},o($Vd1,[2,92]),o($V9,[2,68]),o($V9,[2,69]),o($VD,[2,34]),o($V9,[2,71]),o($VD,[2,36]),o($V9,[2,73]),o($VD,[2,40]),{2:$V$,8:169,9:170,14:166,15:164,16:165,17:167,18:168,19:171,20:$V01,24:$V11,27:$V21,28:$V31,29:$V41,30:$V51,32:$V61,45:284,48:$V71,49:$V81,50:$V91},{2:$V$,8:169,9:170,12:[1,285],14:166,15:210,16:165,17:167,18:168,19:171,20:$V01,24:$V11,27:$V21,28:$V31,29:$V41,30:$V51,32:$V61,48:$V71,49:$V81,50:$V91},{26:[1,286]},o($V9,[2,77]),{11:[1,287],37:$VE,38:$VF,52:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR},{37:$VE,38:$VF,40:[1,288],52:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR},o($VS,[2,107]),o($Vd1,[2,32]),{34:[1,289]},o($Vd1,[2,42]),o($Vd1,[2,43]),{22:[1,290]},{22:[1,291],39:[1,292]},{22:[1,293],39:[1,294]},{22:[1,295],39:[1,296]},{22:[1,297],39:[1,298]},{11:$VV,22:$VW,31:$Vf,39:[1,299]},{2:$V$,8:169,9:170,12:[1,300],14:166,15:210,16:165,17:167,18:168,19:171,20:$V01,24:$V11,27:$V21,28:$V31,29:$V41,30:$V51,32:$V61,48:$V71,49:$V81,50:$V91},o($V9,[2,76]),{36:[1,301]},o($VD,[2,39]),o($VS,[2,121]),{11:[1,302]},{14:62,23:303,30:$Vm,38:$Vn,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{39:[1,305],41:[1,304]},{40:[1,306]},{39:[1,308],41:[1,307]},{40:[1,309]},{39:[1,311],41:[1,310]},{40:[1,312]},{39:[1,314],41:[1,313]},{40:[1,315]},{40:[1,316]},o($V9,[2,75]),{14:62,23:317,30:$Vm,38:$Vn,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},o($Vd1,[2,33]),{11:[1,318],37:$VE,38:$VF,52:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR},{20:[1,319]},{14:62,23:117,30:$Vm,38:$Vn,42:320,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{22:[1,321]},{29:[1,322]},{14:62,23:117,30:$Vm,38:$Vn,42:323,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{22:[1,324]},{28:[1,325]},{14:62,23:117,30:$Vm,38:$Vn,42:326,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{22:[1,327]},{27:[1,328]},{14:62,23:117,30:$Vm,38:$Vn,42:329,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{22:[1,330]},{22:[1,331],39:[1,332]},{11:[1,333],37:$VE,38:$VF,52:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR},o($Vd1,[2,64]),{39:[1,334]},{31:$VZ,40:[1,335]},{39:[1,337],41:[1,336]},{39:[1,338]},{31:$VZ,40:[1,339]},{39:[1,341],41:[1,340]},{39:[1,342]},{31:$VZ,40:[1,343]},{39:[1,345],41:[1,344]},{39:[1,346]},{31:$VZ,40:[1,347]},{39:[1,349],41:[1,348]},{39:[1,351],41:[1,350]},{40:[1,352]},o($VD,[2,38]),{14:62,23:117,30:$Vm,38:$Vn,42:353,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{11:[1,354]},{20:[1,355]},{39:[1,356]},{14:62,23:117,30:$Vm,38:$Vn,42:357,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{11:[1,358]},{29:[1,359]},{39:[1,360]},{14:62,23:117,30:$Vm,38:$Vn,42:361,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{11:[1,362]},{28:[1,363]},{39:[1,364]},{14:62,23:117,30:$Vm,38:$Vn,42:365,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{11:[1,366]},{27:[1,367]},{39:[1,368]},{24:[1,369]},{14:62,23:117,30:$Vm,38:$Vn,42:370,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{22:[1,371]},{31:$VZ,40:[1,372]},o($Vd1,[2,45]),{39:[1,373]},{14:62,23:117,30:$Vm,38:$Vn,42:374,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{31:$VZ,40:[1,375]},o($Vd1,[2,49]),{39:[1,376]},{14:62,23:117,30:$Vm,38:$Vn,42:377,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{31:$VZ,40:[1,378]},o($Vd1,[2,53]),{39:[1,379]},{14:62,23:117,30:$Vm,38:$Vn,42:380,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{31:$VZ,40:[1,381]},o($Vd1,[2,57]),{39:[1,382]},{14:62,23:117,30:$Vm,38:$Vn,42:383,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{25:[1,384]},{31:$VZ,40:[1,385]},{39:[1,387],41:[1,386]},{11:[1,388]},{14:62,23:117,30:$Vm,38:$Vn,42:389,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{31:$VZ,40:[1,390]},{11:[1,391]},{14:62,23:117,30:$Vm,38:$Vn,42:392,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{31:$VZ,40:[1,393]},{11:[1,394]},{14:62,23:117,30:$Vm,38:$Vn,42:395,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{31:$VZ,40:[1,396]},{11:[1,397]},{14:62,23:117,30:$Vm,38:$Vn,42:398,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{31:$VZ,40:[1,399]},{26:[1,400]},{11:[1,401]},{24:[1,402]},{39:[1,403]},o($Vd1,[2,44]),{31:$VZ,40:[1,404]},{31:[1,405]},o($Vd1,[2,48]),{31:$VZ,40:[1,406]},{31:[1,407]},o($Vd1,[2,52]),{31:$VZ,40:[1,408]},{31:[1,409]},o($Vd1,[2,56]),{31:$VZ,40:[1,410]},{31:[1,411]},{39:[1,412]},o($Vd1,[2,61]),{25:[1,413]},{14:62,23:117,30:$Vm,38:$Vn,42:414,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{39:[1,415]},{39:[1,416]},{39:[1,417]},{39:[1,418]},{39:[1,419]},{39:[1,420]},{39:[1,421]},{39:[1,422]},{14:62,23:117,30:$Vm,38:$Vn,42:423,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{26:[1,424]},{31:$VZ,40:[1,425]},{14:62,23:117,30:$Vm,38:$Vn,42:426,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{14:62,23:117,30:$Vm,38:$Vn,42:427,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{14:62,23:117,30:$Vm,38:$Vn,42:428,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{14:62,23:117,30:$Vm,38:$Vn,42:429,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{14:62,23:117,30:$Vm,38:$Vn,42:430,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{14:62,23:117,30:$Vm,38:$Vn,42:431,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{14:62,23:117,30:$Vm,38:$Vn,42:432,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{14:62,23:117,30:$Vm,38:$Vn,42:433,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{31:$VZ,40:[1,434]},{39:[1,435]},{31:[1,436]},{31:$VZ,40:[1,437]},{31:$VZ,40:[1,438]},{31:$VZ,40:[1,439]},{31:$VZ,40:[1,440]},{31:$VZ,40:[1,441]},{31:$VZ,40:[1,442]},{31:$VZ,40:[1,443]},{31:$VZ,40:[1,444]},{11:[1,445]},{14:62,23:117,30:$Vm,38:$Vn,42:446,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{39:[1,447]},{11:[1,448]},{40:[1,449]},{11:[1,450]},{40:[1,451]},{11:[1,452]},{40:[1,453]},{11:[1,454]},{40:[1,455]},o($Vd1,[2,60]),{31:$VZ,40:[1,456]},{14:62,23:117,30:$Vm,38:$Vn,42:457,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},o($Vd1,[2,46]),{11:[1,458]},o($Vd1,[2,50]),{11:[1,459]},o($Vd1,[2,54]),{11:[1,460]},o($Vd1,[2,58]),{11:[1,461]},{39:[1,462]},{31:$VZ,40:[1,463]},o($Vd1,[2,47]),o($Vd1,[2,51]),o($Vd1,[2,55]),o($Vd1,[2,59]),{14:62,23:117,30:$Vm,38:$Vn,42:464,51:60,54:$Vo,55:$Vp,56:$Vq,57:$Vr,58:$Vs,59:$Vt,62:$Vu,72:$Vv},{40:[1,465]},{31:$VZ,40:[1,466]},{11:[1,467]},{11:[1,468]},o($Vd1,[2,63]),o($Vd1,[2,62])],
defaultActions: {17:[2,1],68:[2,81],69:[2,82],70:[2,83],71:[2,84],73:[2,86],185:[2,85]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    var cadena="";
    var listaDeErrores=[];
    const Error = require("../Interprete/instruccion/Errores.js");

    //Dato Asociado
    const {TipoDato} = require("../Interprete/Expresion.js");

    //Expresion:
    const Dato = require("../Interprete/exprecion/Dato.js");
    const Aritmetica = require("../Interprete/exprecion/Aritmeticas.js");
    const Ternario = require("../Interprete/exprecion/Ternarios.js");
    const Negativo = require("../Interprete/exprecion/Negativo.js");
    const Casteo = require("../Interprete/exprecion/Casteos.js");
    const Incre_Decre = require("../Interprete/exprecion/Incre_Decre.js")
    const CallFuncion = require("../Interprete/Funciones/CallFuncion.js");

    //Instruccion:
    const Print = require("../Interprete/instruccion/Print.js");
    const Declarar = require("../Interprete/instruccion/Declarar.js");
    const Vectores = require("../Interprete/instruccion/Vectores.js")
    const AccesoVector = require("../Interprete/instruccion/AccesoVector.js");
    const ReasignarVector = require("../Interprete/instruccion/ReasignarVector.js");
    const Execute = require("../Interprete/Funciones/Execute.js");
    const DecFuncion = require("../Interprete/Funciones/DecFuncion.js");
    const Return = require("../Interprete/instruccion/Return.js");
    const Break = require("../Interprete/instruccion/Break.js");
    const Continue = require("../Interprete/instruccion/Continue.js");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// comentario de linea
break;
case 1:// comentario multiples lineas
break;
case 2: return 32; 
break;
case 3: return 34; 
break;
case 4: return 62; 
break;
case 5: return 24; 
break;
case 6: return 41; 
break;
case 7: return 43; 
break;
case 8: return 13; 
break;
case 9: return 48; 
break;
case 10: return 50; 
break;
case 11: return 49; 
break;
case 12: return 57; 
break;
case 13: return 58; 
break;
case 14: return 20; 
break;
case 15: return 24; 
break;
case 16: return 26; 
break;
case 17: return 27; 
break;
case 18: return 28; 
break;
case 19: return 29; 
break;
case 20: return 65; 
break;
case 21: return 64; 
break;
case 22: return 22; 
break;
case 23: return 66; 
break;
case 24: return 33; 
break;
case 25: return 67; 
break;
case 26: return 68; 
break;
case 27: return 69; 
break;
case 28: return 70; 
break;
case 29: return 71; 
break;
case 30: return 72; 
break;
case 31: return 25; 
break;
case 32: return 53; 
break;
case 33: return 11; 
break;
case 34: return 31; 
break;
case 35: return 35; 
break;
case 36: return 36; 
break;
case 37: return 37; 
break;
case 38: return 38; 
break;
case 39: return 60; 
break;
case 40: return 61; 
break;
case 41: return 63; 
break;
case 42: return 52; 
break;
case 43: return 39; 
break;
case 44: return 40; 
break;
case 45: return 44; 
break;
case 46: return 12; 
break;
case 47: return 55; 
break;
case 48: return 54; 
break;
case 49: return 30; 
break;
case 50: cadena=""; this.begin("string"); 
break;
case 51: cadena+=yy_.yytext; 
break;
case 52: cadena+="\""; 
break;
case 53: cadena+="\n"; 
break;
case 54: cadena+=" ";  
break;
case 55: cadena+="\t"; 
break;
case 56: cadena+="\\"; 
break;
case 57: cadena+="\'"; 
break;
case 58: yy_.yytext=cadena; this.popState(); return 59; 
break;
case 59: return 56 
break;
case 60:/* Espacios se ignoran */
break;
case 61:return 5;
break;
case 62: var nuevo_error = new Error("Error L칠xico","Caracter Incorrecto: "+yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column); listaDeErrores.push(nuevo_error); 
    console.error('Error l칠xico: \"' + yy_.yytext + '\", linea: ' + yy_.yylloc.first_line + ', columna: ' + yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:pow\b)/i,/^(?:std\b)/i,/^(?:new\b)/i,/^(?:void\b)/i,/^(?:execute\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:int\b)/i,/^(?:std\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:bool\b)/i,/^(?:double\b)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:=)/i,/^(?:<=)/i,/^(?:<<)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:::)/i,/^(?::)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\?)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:(([0-9]+[.][0-9]+)))/i,/^(?:([0-9]+))/i,/^(?:([a-zA-Z][a-zA-Z0-9_]*))/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\s)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:["])/i,/^(?:["\'"]([^"\'"])?["\'"])/i,/^(?:[ \s\r\n\t])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[51,52,53,54,55,56,57,58],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,59,60,61,62],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}